{"ast":null,"code":"// File: frontend/src/agents/cnnAgent.js\n// agents/mcpManager.js\nimport { predictDigit } from './cnnAgent.js';\nimport { generateFeedback } from './feedbackAgent.js';\nimport { endTracking } from './tracking_agent/index.js';\nimport { calculateMetrics } from './tracking_agent/metrics_calculator.js';\nimport { detectFatigue } from './tracking_agent/fatigue_detector.js';\nimport { getStrokesRaw } from './tracking_agent';\nimport { generatePDFReportFull, generateJSONReport } from './tracking_agent/report_generator.js';\nimport { saveSessionResult, getSessionProgressReport } from './tracking_agent/session_logger.js';\nimport JSZip from 'jszip';\nimport { analyzeStrokeSpeed, detectMicrographia, detectTremor } from './tracking_agent/metrics_calculator.js';\nexport class MCPManager {\n  constructor() {\n    this.sessionData = [];\n    this.debugArchive = []; // 🆕 for saving images + txt\n    this.patientName = \"Anonymous\";\n    this.sessionId = null;\n    this.language = localStorage.getItem(\"language\") || \"en\";\n  }\n  async startSession(patientName = \"Anonymous\") {\n    console.log(\"🟢 MCP session started for:\", patientName);\n    this.patientName = patientName;\n    this.sessionId = `session_${Date.now()}`;\n  }\n\n  // ✅ Now accepts targetDigit as an argument\n  async processDrawing(drawingDataURL, targetDigit = null) {\n    console.log(\"🔥 [MCP] processDrawing called!\", drawingDataURL, targetDigit);\n    const predictedDigit = await predictDigit(drawingDataURL, this.language, null, this.debugArchive, this.patientName);\n    const feedbackText = await generateFeedback(drawingDataURL, predictedDigit);\n    const strokes = (getStrokesRaw === null || getStrokesRaw === void 0 ? void 0 : getStrokesRaw()) || []; // 🔍 You need to expose this from tracking_agent\n\n    const entry = {\n      drawingDataURL,\n      predictedDigit,\n      targetDigit,\n      correct: targetDigit !== null && predictedDigit === targetDigit,\n      feedbackText,\n      timestamp: new Date().toISOString(),\n      strokes // ✅ Add this!\n    };\n    this.sessionData.push(entry);\n    console.log(\"📝 [MCP] Added entry:\", entry);\n    console.log(\"📊 sessionData so far:\", this.sessionData);\n    return {\n      predictedDigit,\n      feedbackText\n    };\n  }\n  async endSession({\n    generatePDF = true,\n    generateJSON = true,\n    autoDownloadLog = true\n  } = {}) {\n    console.log(\"🔴 MCP ending session for:\", this.patientName);\n    const trackingResults = await endTracking({\n      patientName: this.patientName,\n      sessionId: this.sessionId,\n      generateJSON,\n      autoDownloadLog\n    });\n    const strokes = trackingResults.strokes || [];\n    console.log(\"👉 Strokes received in MCP:\", strokes);\n    const metrics = calculateMetrics(strokes);\n    console.log(\"✅ Calculated metrics:\", metrics);\n    const fatigueInfo = detectFatigue(strokes);\n    const strokeSpeedData = analyzeStrokeSpeed(strokes);\n    const micrographiaData = detectMicrographia(strokes);\n    const tremorData = detectTremor(strokes);\n    const digitAccuracy = this.sessionData.filter(d => d.correct).length / (this.sessionData.length || 1);\n    const progressReport = getSessionProgressReport({\n      ...metrics,\n      strokeSpeedData,\n      micrographiaData,\n      tremorData,\n      digitAccuracy\n    }, this.patientName);\n\n    // 💾 Save session summary to localStorage\n    saveSessionResult(this.patientName.toLowerCase(), {\n      sessionId: this.sessionId,\n      timestamp: new Date().toISOString(),\n      patientName: this.patientName,\n      metrics: {\n        ...metrics,\n        strokeSpeedData,\n        micrographiaData,\n        tremorData,\n        digitAccuracy\n      },\n      fatigueInfo,\n      attempts: this.sessionData // ✅ this is what powers digit summary!\n    });\n    console.log(\"📊 Progress Report:\", progressReport);\n    try {\n      // 📄 Generate PDF report\n      if (generatePDF) {\n        await generatePDFReportFull({\n          attempts: this.sessionData,\n          metrics,\n          fatigueInfo,\n          digitAccuracy,\n          patientName: this.patientName,\n          sessionId: this.sessionId,\n          language: this.language || localStorage.getItem(\"language\") || \"en\",\n          autoSave: autoDownloadLog\n        });\n      }\n\n      // 🧾 Generate JSON report\n      if (generateJSON) {\n        await generateJSONReport(metrics, fatigueInfo);\n      }\n\n      // 🗂️ Create ZIP of debug images\n      if (this.debugArchive.length > 0) {\n        const zip = new JSZip();\n        for (const item of this.debugArchive) {\n          zip.file(item.name, item.blob);\n        }\n        const content = await zip.generateAsync({\n          type: \"blob\"\n        });\n        const a = document.createElement(\"a\");\n        a.href = URL.createObjectURL(content);\n        a.download = `session_${this.patientName}_${Date.now()}.zip`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      }\n    } catch (err) {\n      console.warn(\"⚠️ Export failed during endSession:\", err);\n    }\n    return {\n      drawings: this.sessionData,\n      metrics,\n      fatigueInfo,\n      strokeSpeedData,\n      micrographiaData,\n      tremorData,\n      digitAccuracy,\n      progressReport\n    };\n  }\n}","map":{"version":3,"names":["predictDigit","generateFeedback","endTracking","calculateMetrics","detectFatigue","getStrokesRaw","generatePDFReportFull","generateJSONReport","saveSessionResult","getSessionProgressReport","JSZip","analyzeStrokeSpeed","detectMicrographia","detectTremor","MCPManager","constructor","sessionData","debugArchive","patientName","sessionId","language","localStorage","getItem","startSession","console","log","Date","now","processDrawing","drawingDataURL","targetDigit","predictedDigit","feedbackText","strokes","entry","correct","timestamp","toISOString","push","endSession","generatePDF","generateJSON","autoDownloadLog","trackingResults","metrics","fatigueInfo","strokeSpeedData","micrographiaData","tremorData","digitAccuracy","filter","d","length","progressReport","toLowerCase","attempts","autoSave","zip","item","file","name","blob","content","generateAsync","type","a","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","err","warn","drawings"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/mcpManager.js"],"sourcesContent":["// File: frontend/src/agents/cnnAgent.js\r\n// agents/mcpManager.js\r\nimport { predictDigit } from './cnnAgent.js';\r\nimport { generateFeedback } from './feedbackAgent.js';\r\nimport { endTracking } from './tracking_agent/index.js';\r\nimport { calculateMetrics } from './tracking_agent/metrics_calculator.js';\r\nimport { detectFatigue } from './tracking_agent/fatigue_detector.js';\r\nimport { getStrokesRaw } from './tracking_agent'; \r\nimport { generatePDFReportFull, generateJSONReport } from './tracking_agent/report_generator.js';\r\nimport { saveSessionResult, getSessionProgressReport } from './tracking_agent/session_logger.js';\r\nimport JSZip from 'jszip';\r\n\r\n\r\nimport { analyzeStrokeSpeed, detectMicrographia, detectTremor } from './tracking_agent/metrics_calculator.js';\r\n\r\nexport class MCPManager {\r\n  constructor() {\r\n    this.sessionData = [];\r\n    this.debugArchive = []; // 🆕 for saving images + txt\r\n    this.patientName = \"Anonymous\";\r\n    this.sessionId = null;\r\n    this.language = localStorage.getItem(\"language\") || \"en\";\r\n  }\r\n\r\n  async startSession(patientName = \"Anonymous\") {\r\n    console.log(\"🟢 MCP session started for:\", patientName);\r\n    this.patientName = patientName;\r\n    this.sessionId = `session_${Date.now()}`;\r\n    \r\n  }\r\n\r\n  // ✅ Now accepts targetDigit as an argument\r\n  async processDrawing(drawingDataURL, targetDigit = null) {\r\n\r\n    console.log(\"🔥 [MCP] processDrawing called!\", drawingDataURL, targetDigit);\r\n\r\n    const predictedDigit = await predictDigit(drawingDataURL, this.language, null, this.debugArchive, this.patientName);\r\n    const feedbackText = await generateFeedback(drawingDataURL, predictedDigit);\r\n\r\nconst strokes = getStrokesRaw?.() || []; // 🔍 You need to expose this from tracking_agent\r\n\r\nconst entry = {\r\n  drawingDataURL,\r\n  predictedDigit,\r\n  targetDigit,\r\n  correct: targetDigit !== null && predictedDigit === targetDigit,\r\n  feedbackText,\r\n  timestamp: new Date().toISOString(),\r\n  strokes // ✅ Add this!\r\n};\r\n\r\n    this.sessionData.push(entry);\r\n    console.log(\"📝 [MCP] Added entry:\", entry);\r\nconsole.log(\"📊 sessionData so far:\", this.sessionData);\r\n\r\n    return { predictedDigit, feedbackText };\r\n  }\r\n\r\nasync endSession({ generatePDF = true, generateJSON = true, autoDownloadLog = true } = {}) {\r\n  console.log(\"🔴 MCP ending session for:\", this.patientName);\r\n\r\n  const trackingResults = await endTracking({\r\n    patientName: this.patientName,\r\n    sessionId: this.sessionId,\r\n    generateJSON,\r\n    autoDownloadLog\r\n  });\r\n\r\n  const strokes = trackingResults.strokes || [];\r\n  console.log(\"👉 Strokes received in MCP:\", strokes);\r\n\r\n  const metrics = calculateMetrics(strokes);\r\n  console.log(\"✅ Calculated metrics:\", metrics);\r\n\r\n  const fatigueInfo = detectFatigue(strokes);\r\n\r\n  const strokeSpeedData = analyzeStrokeSpeed(strokes);\r\n  const micrographiaData = detectMicrographia(strokes);\r\n  const tremorData = detectTremor(strokes);\r\n\r\n  const digitAccuracy = this.sessionData.filter(d => d.correct).length / (this.sessionData.length || 1);\r\n\r\n  const progressReport = getSessionProgressReport({\r\n    ...metrics,\r\n    strokeSpeedData,\r\n    micrographiaData,\r\n    tremorData,\r\n    digitAccuracy,\r\n  }, this.patientName);\r\n\r\n  // 💾 Save session summary to localStorage\r\nsaveSessionResult(this.patientName.toLowerCase(), {\r\n  sessionId: this.sessionId,\r\n  timestamp: new Date().toISOString(),\r\n  patientName: this.patientName,\r\n  metrics: {\r\n    ...metrics,\r\n    strokeSpeedData,\r\n    micrographiaData,\r\n    tremorData,\r\n    digitAccuracy\r\n  },\r\n  fatigueInfo,\r\n  attempts: this.sessionData // ✅ this is what powers digit summary!\r\n});\r\n\r\n\r\n  console.log(\"📊 Progress Report:\", progressReport);\r\n\r\n  try {\r\n    // 📄 Generate PDF report\r\n    if (generatePDF) {\r\n      await generatePDFReportFull({\r\n        attempts: this.sessionData,\r\n        metrics,\r\n        fatigueInfo,\r\n        digitAccuracy,\r\n        patientName: this.patientName,\r\n        sessionId: this.sessionId,\r\n        language: this.language || localStorage.getItem(\"language\") || \"en\",\r\n        autoSave: autoDownloadLog\r\n      });\r\n    }\r\n\r\n    // 🧾 Generate JSON report\r\n    if (generateJSON) {\r\n      await generateJSONReport(metrics, fatigueInfo);\r\n    }\r\n\r\n    // 🗂️ Create ZIP of debug images\r\n    if (this.debugArchive.length > 0) {\r\n      const zip = new JSZip();\r\n      for (const item of this.debugArchive) {\r\n        zip.file(item.name, item.blob);\r\n      }\r\n\r\n      const content = await zip.generateAsync({ type: \"blob\" });\r\n      const a = document.createElement(\"a\");\r\n      a.href = URL.createObjectURL(content);\r\n      a.download = `session_${this.patientName}_${Date.now()}.zip`;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n    }\r\n\r\n  } catch (err) {\r\n    console.warn(\"⚠️ Export failed during endSession:\", err);\r\n  }\r\n\r\n  return {\r\n    drawings: this.sessionData,\r\n    metrics,\r\n    fatigueInfo,\r\n    strokeSpeedData,\r\n    micrographiaData,\r\n    tremorData,\r\n    digitAccuracy,\r\n    progressReport\r\n  };\r\n}\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}