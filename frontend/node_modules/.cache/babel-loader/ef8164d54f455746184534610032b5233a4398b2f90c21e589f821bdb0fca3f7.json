{"ast":null,"code":"// frontend/src/agents/tracking_agent/session_logger.js\n\nconst STORAGE_KEY = \"attempts\";\n\n// 🔐 1. Log individual drawing attempts\nexport function logAttempt(metricsObj) {\n  const existing = JSON.parse(localStorage.getItem(STORAGE_KEY) || \"[]\");\n  existing.push(metricsObj);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(existing));\n}\n\n// 🔍 2. Retrieve drawing attempts\nexport function getAllAttempts() {\n  return JSON.parse(localStorage.getItem(STORAGE_KEY) || \"[]\");\n}\n\n// 🧹 3. Clear attempts\nexport function clearAttempts() {\n  localStorage.removeItem(STORAGE_KEY);\n}\nexport function saveSessionResult(patientName, sessionData) {\n  const cleanName = patientName.trim().toLowerCase();\n  const key = `sessions_${cleanName}`;\n  const existing = JSON.parse(localStorage.getItem(key) || \"[]\");\n\n  // Prevent duplicate sessionId\n  const alreadyExists = existing.some(e => e.sessionId === sessionData.sessionId);\n  if (alreadyExists) return;\n  existing.push(sessionData);\n  localStorage.setItem(key, JSON.stringify(existing));\n}\n\n// 📊 5. Retrieve all sessions for dashboard chart\nexport function getAllSessions(patientName) {\n  const key = `sessions_${patientName.toLowerCase()}`; // ✅ FIXED to match saveSessionResult\n  const sessions = JSON.parse(localStorage.getItem(key) || \"[]\");\n  console.log(\"🟢 getAllSessions() for\", key, \"→\", sessions);\n  return sessions;\n}\nconsole.log(\"📦 Saving session:\", sessionData);\n\n// 📈 6. Generate progress report (compare last 2 sessions)\nexport function getSessionProgressReport(currentMetrics, patientName) {\n  var _currentMetrics$micro, _lastSession$microgra, _currentMetrics$tremo, _lastSession$tremorDa;\n  const pastSessions = getAllSessions(patientName);\n  const lastSession = pastSessions.at(-2); // skip the one we just added\n\n  if (!lastSession) return null;\n  return {\n    speedChange: currentMetrics.avgSpeed - lastSession.metrics.avgSpeed,\n    sizeChange: ((_currentMetrics$micro = currentMetrics.micrographiaData) === null || _currentMetrics$micro === void 0 ? void 0 : _currentMetrics$micro.shrinkRatio) - ((_lastSession$microgra = lastSession.micrographiaData) === null || _lastSession$microgra === void 0 ? void 0 : _lastSession$microgra.shrinkRatio),\n    tremorChange: ((_currentMetrics$tremo = currentMetrics.tremorData) === null || _currentMetrics$tremo === void 0 ? void 0 : _currentMetrics$tremo.tremorScore) - ((_lastSession$tremorDa = lastSession.tremorData) === null || _lastSession$tremorDa === void 0 ? void 0 : _lastSession$tremorDa.tremorScore),\n    improvement: currentMetrics.digitAccuracy > lastSession.digitAccuracy\n  };\n}","map":{"version":3,"names":["STORAGE_KEY","logAttempt","metricsObj","existing","JSON","parse","localStorage","getItem","push","setItem","stringify","getAllAttempts","clearAttempts","removeItem","saveSessionResult","patientName","sessionData","cleanName","trim","toLowerCase","key","alreadyExists","some","e","sessionId","getAllSessions","sessions","console","log","getSessionProgressReport","currentMetrics","_currentMetrics$micro","_lastSession$microgra","_currentMetrics$tremo","_lastSession$tremorDa","pastSessions","lastSession","at","speedChange","avgSpeed","metrics","sizeChange","micrographiaData","shrinkRatio","tremorChange","tremorData","tremorScore","improvement","digitAccuracy"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/tracking_agent/session_logger.js"],"sourcesContent":["\r\n// frontend/src/agents/tracking_agent/session_logger.js\r\n\r\nconst STORAGE_KEY = \"attempts\";\r\n\r\n// 🔐 1. Log individual drawing attempts\r\nexport function logAttempt(metricsObj) {\r\n  const existing = JSON.parse(localStorage.getItem(STORAGE_KEY) || \"[]\");\r\n  existing.push(metricsObj);\r\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(existing));\r\n}\r\n\r\n// 🔍 2. Retrieve drawing attempts\r\nexport function getAllAttempts() {\r\n  return JSON.parse(localStorage.getItem(STORAGE_KEY) || \"[]\");\r\n}\r\n\r\n// 🧹 3. Clear attempts\r\nexport function clearAttempts() {\r\n  localStorage.removeItem(STORAGE_KEY);\r\n}\r\n\r\nexport function saveSessionResult(patientName, sessionData) {\r\n  const cleanName = patientName.trim().toLowerCase();\r\n  const key = `sessions_${cleanName}`;\r\n\r\n  const existing = JSON.parse(localStorage.getItem(key) || \"[]\");\r\n\r\n  // Prevent duplicate sessionId\r\n  const alreadyExists = existing.some(e => e.sessionId === sessionData.sessionId);\r\n  if (alreadyExists) return;\r\n\r\n  existing.push(sessionData);\r\n  localStorage.setItem(key, JSON.stringify(existing));\r\n}\r\n\r\n\r\n// 📊 5. Retrieve all sessions for dashboard chart\r\nexport function getAllSessions(patientName) {\r\n  const key = `sessions_${patientName.toLowerCase()}`; // ✅ FIXED to match saveSessionResult\r\n  const sessions = JSON.parse(localStorage.getItem(key) || \"[]\");\r\n  console.log(\"🟢 getAllSessions() for\", key, \"→\", sessions);\r\n  return sessions;\r\n}\r\nconsole.log(\"📦 Saving session:\", sessionData);\r\n\r\n\r\n// 📈 6. Generate progress report (compare last 2 sessions)\r\nexport function getSessionProgressReport(currentMetrics, patientName) {\r\n  const pastSessions = getAllSessions(patientName);\r\n  const lastSession = pastSessions.at(-2); // skip the one we just added\r\n\r\n  if (!lastSession) return null;\r\n\r\n  return {\r\n    speedChange: currentMetrics.avgSpeed - lastSession.metrics.avgSpeed,\r\n    sizeChange: currentMetrics.micrographiaData?.shrinkRatio - lastSession.micrographiaData?.shrinkRatio,\r\n    tremorChange: currentMetrics.tremorData?.tremorScore - lastSession.tremorData?.tremorScore,\r\n    improvement: currentMetrics.digitAccuracy > lastSession.digitAccuracy,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}