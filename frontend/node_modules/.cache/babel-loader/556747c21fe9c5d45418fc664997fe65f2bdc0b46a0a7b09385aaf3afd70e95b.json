{"ast":null,"code":"// agents/mcpManager.js\n\nimport { predictDigit } from './cnnAgent.js';\nimport { generateFeedback } from './feedbackAgent.js';\nimport { endTracking } from './tracking_agent/index.js';\nimport { calculateMetrics } from './tracking_agent/metrics_calculator.js';\nimport { detectFatigue } from './tracking_agent/fatigue_detector.js';\nimport { generatePDFReport, generateJSONReport } from './tracking_agent/report_generator.js';\nimport { logSession } from './tracking_agent/session_logger.js';\nexport class MCPManager {\n  constructor() {\n    this.sessionData = [];\n    this.patientName = \"Anonymous\";\n    this.sessionId = null;\n  }\n  async startSession(patientName = \"Anonymous\") {\n    console.log(\"üü¢ MCP session started for:\", patientName);\n    this.patientName = patientName;\n    this.sessionId = `session_${Date.now()}`;\n  }\n  async processDrawing(drawingDataURL) {\n    console.log(\"üñäÔ∏è MCP processing drawing.\");\n    const predictedDigit = await predictDigit(drawingDataURL);\n    console.log(\"üîç Predicted digit:\", predictedDigit);\n    const feedbackText = await generateFeedback(drawingDataURL, predictedDigit);\n    console.log(\"üí¨ Generated feedback:\", feedbackText);\n    this.sessionData.push({\n      drawingDataURL,\n      predictedDigit,\n      feedbackText\n    });\n    console.log(\"üìä MCP session data updated.\");\n    return {\n      predictedDigit,\n      feedbackText\n    };\n  }\n  async endSession({\n    generatePDF = true,\n    generateJSON = true,\n    autoDownloadLog = true\n  } = {}) {\n    console.log(\"üî¥ MCP ending session for:\", this.patientName);\n    const trackingResults = await endTracking({\n      patientName: this.patientName,\n      sessionId: this.sessionId,\n      generateJSON,\n      autoDownloadLog\n    });\n    const strokes = trackingResults.strokes || [];\n    const metrics = calculateMetrics(strokes);\n    const fatigueInfo = detectFatigue(strokes);\n    if (generatePDF) {\n      await generatePDFReport(metrics, fatigueInfo, {\n        autoSave: autoDownloadLog,\n        patientName: this.patientName,\n        sessionId: this.sessionId\n      });\n    }\n    if (generateJSON) {\n      await generateJSONReport(metrics, fatigueInfo);\n    }\n    if (autoDownloadLog) {\n      logSession(strokes, metrics, fatigueInfo, {\n        autoDownload: true,\n        filename: `${this.patientName}_${this.sessionId}`\n      });\n    }\n    return {\n      drawings: this.sessionData,\n      metrics,\n      fatigueInfo\n    };\n  }\n}","map":{"version":3,"names":["predictDigit","generateFeedback","endTracking","calculateMetrics","detectFatigue","generatePDFReport","generateJSONReport","logSession","MCPManager","constructor","sessionData","patientName","sessionId","startSession","console","log","Date","now","processDrawing","drawingDataURL","predictedDigit","feedbackText","push","endSession","generatePDF","generateJSON","autoDownloadLog","trackingResults","strokes","metrics","fatigueInfo","autoSave","autoDownload","filename","drawings"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/mcpManager.js"],"sourcesContent":["// agents/mcpManager.js\r\n\r\nimport { predictDigit } from './cnnAgent.js';\r\nimport { generateFeedback } from './feedbackAgent.js';\r\nimport { endTracking } from './tracking_agent/index.js';\r\nimport { calculateMetrics } from './tracking_agent/metrics_calculator.js';\r\nimport { detectFatigue } from './tracking_agent/fatigue_detector.js';\r\nimport { generatePDFReport, generateJSONReport } from './tracking_agent/report_generator.js';\r\nimport { logSession } from './tracking_agent/session_logger.js';\r\n\r\nexport class MCPManager {\r\n  constructor() {\r\n    this.sessionData = [];\r\n    this.patientName = \"Anonymous\";\r\n    this.sessionId = null;\r\n  }\r\n\r\n  async startSession(patientName = \"Anonymous\") {\r\n    console.log(\"üü¢ MCP session started for:\", patientName);\r\n    this.patientName = patientName;\r\n    this.sessionId = `session_${Date.now()}`;\r\n  }\r\n\r\n  async processDrawing(drawingDataURL) {\r\n    console.log(\"üñäÔ∏è MCP processing drawing.\");\r\n    const predictedDigit = await predictDigit(drawingDataURL);\r\n    console.log(\"üîç Predicted digit:\", predictedDigit);\r\n\r\n    const feedbackText = await generateFeedback(drawingDataURL, predictedDigit);\r\n    console.log(\"üí¨ Generated feedback:\", feedbackText);\r\n\r\n    this.sessionData.push({ drawingDataURL, predictedDigit, feedbackText });\r\n    console.log(\"üìä MCP session data updated.\");\r\n\r\n    return { predictedDigit, feedbackText };\r\n  }\r\n\r\n  async endSession({ generatePDF = true, generateJSON = true, autoDownloadLog = true } = {}) {\r\n    console.log(\"üî¥ MCP ending session for:\", this.patientName);\r\n\r\n    const trackingResults = await endTracking({\r\n      patientName: this.patientName,\r\n      sessionId: this.sessionId,\r\n      generateJSON,\r\n      autoDownloadLog\r\n    });\r\n\r\n    const strokes = trackingResults.strokes || [];\r\n    const metrics = calculateMetrics(strokes);\r\n    const fatigueInfo = detectFatigue(strokes);\r\n\r\n    if (generatePDF) {\r\n      await generatePDFReport(metrics, fatigueInfo, {\r\n        autoSave: autoDownloadLog,\r\n        patientName: this.patientName,\r\n        sessionId: this.sessionId\r\n      });\r\n    }\r\n\r\n    if (generateJSON) {\r\n      await generateJSONReport(metrics, fatigueInfo);\r\n    }\r\n\r\n    if (autoDownloadLog) {\r\n      logSession(strokes, metrics, fatigueInfo, {\r\n        autoDownload: true,\r\n        filename: `${this.patientName}_${this.sessionId}`,\r\n      });\r\n    }\r\n\r\n    return {\r\n      drawings: this.sessionData,\r\n      metrics,\r\n      fatigueInfo,\r\n    };\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,gBAAgB,QAAQ,wCAAwC;AACzE,SAASC,aAAa,QAAQ,sCAAsC;AACpE,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,sCAAsC;AAC5F,SAASC,UAAU,QAAQ,oCAAoC;AAE/D,OAAO,MAAMC,UAAU,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,WAAW,GAAG,WAAW;IAC9B,IAAI,CAACC,SAAS,GAAG,IAAI;EACvB;EAEA,MAAMC,YAAYA,CAACF,WAAW,GAAG,WAAW,EAAE;IAC5CG,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEJ,WAAW,CAAC;IACvD,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,SAAS,GAAG,WAAWI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;EAC1C;EAEA,MAAMC,cAAcA,CAACC,cAAc,EAAE;IACnCL,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,MAAMK,cAAc,GAAG,MAAMpB,YAAY,CAACmB,cAAc,CAAC;IACzDL,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEK,cAAc,CAAC;IAElD,MAAMC,YAAY,GAAG,MAAMpB,gBAAgB,CAACkB,cAAc,EAAEC,cAAc,CAAC;IAC3EN,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEM,YAAY,CAAC;IAEnD,IAAI,CAACX,WAAW,CAACY,IAAI,CAAC;MAAEH,cAAc;MAAEC,cAAc;MAAEC;IAAa,CAAC,CAAC;IACvEP,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAE3C,OAAO;MAAEK,cAAc;MAAEC;IAAa,CAAC;EACzC;EAEA,MAAME,UAAUA,CAAC;IAAEC,WAAW,GAAG,IAAI;IAAEC,YAAY,GAAG,IAAI;IAAEC,eAAe,GAAG;EAAK,CAAC,GAAG,CAAC,CAAC,EAAE;IACzFZ,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAACJ,WAAW,CAAC;IAE3D,MAAMgB,eAAe,GAAG,MAAMzB,WAAW,CAAC;MACxCS,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBa,YAAY;MACZC;IACF,CAAC,CAAC;IAEF,MAAME,OAAO,GAAGD,eAAe,CAACC,OAAO,IAAI,EAAE;IAC7C,MAAMC,OAAO,GAAG1B,gBAAgB,CAACyB,OAAO,CAAC;IACzC,MAAME,WAAW,GAAG1B,aAAa,CAACwB,OAAO,CAAC;IAE1C,IAAIJ,WAAW,EAAE;MACf,MAAMnB,iBAAiB,CAACwB,OAAO,EAAEC,WAAW,EAAE;QAC5CC,QAAQ,EAAEL,eAAe;QACzBf,WAAW,EAAE,IAAI,CAACA,WAAW;QAC7BC,SAAS,EAAE,IAAI,CAACA;MAClB,CAAC,CAAC;IACJ;IAEA,IAAIa,YAAY,EAAE;MAChB,MAAMnB,kBAAkB,CAACuB,OAAO,EAAEC,WAAW,CAAC;IAChD;IAEA,IAAIJ,eAAe,EAAE;MACnBnB,UAAU,CAACqB,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAE;QACxCE,YAAY,EAAE,IAAI;QAClBC,QAAQ,EAAE,GAAG,IAAI,CAACtB,WAAW,IAAI,IAAI,CAACC,SAAS;MACjD,CAAC,CAAC;IACJ;IAEA,OAAO;MACLsB,QAAQ,EAAE,IAAI,CAACxB,WAAW;MAC1BmB,OAAO;MACPC;IACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}