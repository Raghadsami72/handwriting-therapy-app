{"ast":null,"code":"export default class TherapySessionAgent {\n  constructor(patientName = \"Anonymous\", mcp = null) {\n    this.patientName = patientName;\n    this.digits = [...Array(10).keys()];\n    this.currentIndex = 0;\n    this.attempts = []; // ‚úÖ Add or fix this line\n    this.sessionId = `session_${Date.now()}`;\n    this.mcp = mcp;\n  }\n  getCurrentDigit() {\n    return this.digits[this.currentIndex];\n  }\n  getStrokes() {\n    var _this$mcp, _this$mcp$sessionData;\n    const mcpEntry = (_this$mcp = this.mcp) === null || _this$mcp === void 0 ? void 0 : (_this$mcp$sessionData = _this$mcp.sessionData) === null || _this$mcp$sessionData === void 0 ? void 0 : _this$mcp$sessionData[this.currentIndex];\n    return (mcpEntry === null || mcpEntry === void 0 ? void 0 : mcpEntry.strokes) || [];\n  }\n  goToNextDigit() {\n    if (this.currentIndex < this.digits.length - 1) {\n      this.currentIndex++;\n    }\n  }\n  isSessionFinished() {\n    return this.currentIndex >= this.digits.length - 1;\n  }\n\n  // ‚úÖ Let MCP handle the full drawing logic\n  // üÜï Drop this into TherapySessionAgent.js\n  async processDrawing(dataURL, targetDigit) {\n    // 1Ô∏è‚É£ Forward the drawing + targetDigit to MCPManager\n    const {\n      predictedDigit,\n      feedbackText\n    } = await this.mcp.processDrawing(dataURL, targetDigit // ‚úÖ make sure MCP receives it\n    );\n\n    // 2Ô∏è‚É£ (Optional) keep a local log inside TherapySessionAgent\n    this.attempts.push({\n      targetDigit,\n      predictedDigit,\n      correct: predictedDigit === targetDigit,\n      feedbackText,\n      timestamp: new Date().toISOString()\n    });\n\n    // 3Ô∏è‚É£ Return prediction + feedback back to Canvas/UI\n    return {\n      predictedDigit,\n      feedbackText\n    };\n  }\n\n  // ‚úÖ Return sessionData directly from MCP\n  async endSession() {\n    const {\n      drawings,\n      metrics,\n      fatigueInfo,\n      strokeSpeedData,\n      micrographiaData,\n      tremorData,\n      digitAccuracy,\n      progressReport\n    } = await this.mcp.endSession({\n      autoDownloadLog: true,\n      generatePDF: false,\n      generateJSON: false\n    });\n    return {\n      // ‚úÖ This is the FIX ‚Äî pass the drawings (MCP's sessionData) as attempts\n      attempts: drawings,\n      metrics,\n      fatigueInfo,\n      strokeSpeedData,\n      micrographiaData,\n      tremorData,\n      digitAccuracy,\n      progressReport,\n      patientName: this.patientName,\n      sessionId: this.sessionId\n    };\n  }\n}","map":{"version":3,"names":["TherapySessionAgent","constructor","patientName","mcp","digits","Array","keys","currentIndex","attempts","sessionId","Date","now","getCurrentDigit","getStrokes","_this$mcp","_this$mcp$sessionData","mcpEntry","sessionData","strokes","goToNextDigit","length","isSessionFinished","processDrawing","dataURL","targetDigit","predictedDigit","feedbackText","push","correct","timestamp","toISOString","endSession","drawings","metrics","fatigueInfo","strokeSpeedData","micrographiaData","tremorData","digitAccuracy","progressReport","autoDownloadLog","generatePDF","generateJSON"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/tracking_agent/TherapySessionAgent.js"],"sourcesContent":["export default class TherapySessionAgent {\r\nconstructor(patientName = \"Anonymous\", mcp = null) {\r\n  this.patientName = patientName;\r\n  this.digits = [...Array(10).keys()];\r\n  this.currentIndex = 0;\r\n  this.attempts = []; // ‚úÖ Add or fix this line\r\n  this.sessionId = `session_${Date.now()}`;\r\n  this.mcp = mcp;\r\n}\r\n\r\n\r\n  getCurrentDigit() {\r\n    return this.digits[this.currentIndex];\r\n  }\r\n\r\n  getStrokes() {\r\n    const mcpEntry = this.mcp?.sessionData?.[this.currentIndex];\r\n    return mcpEntry?.strokes || [];\r\n  }\r\n\r\n  goToNextDigit() {\r\n    if (this.currentIndex < this.digits.length - 1) {\r\n      this.currentIndex++;\r\n    }\r\n  }\r\n\r\n  isSessionFinished() {\r\n    return this.currentIndex >= this.digits.length - 1;\r\n  }\r\n\r\n  // ‚úÖ Let MCP handle the full drawing logic\r\n// üÜï Drop this into TherapySessionAgent.js\r\nasync processDrawing(dataURL, targetDigit) {\r\n  // 1Ô∏è‚É£ Forward the drawing + targetDigit to MCPManager\r\n  const { predictedDigit, feedbackText } = await this.mcp.processDrawing(\r\n    dataURL,\r\n    targetDigit        // ‚úÖ make sure MCP receives it\r\n  );\r\n\r\n  // 2Ô∏è‚É£ (Optional) keep a local log inside TherapySessionAgent\r\n  this.attempts.push({\r\n    targetDigit,\r\n    predictedDigit,\r\n    correct: predictedDigit === targetDigit,\r\n    feedbackText,\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n\r\n  // 3Ô∏è‚É£ Return prediction + feedback back to Canvas/UI\r\n  return { predictedDigit, feedbackText };\r\n}\r\n\r\n\r\n\r\n\r\n  // ‚úÖ Return sessionData directly from MCP\r\nasync endSession() {\r\n  const {\r\n    drawings,\r\n    metrics,\r\n    fatigueInfo,\r\n    strokeSpeedData,\r\n    micrographiaData,\r\n    tremorData,\r\n    digitAccuracy,\r\n    progressReport\r\n  } = await this.mcp.endSession({\r\n    autoDownloadLog: true,\r\n    generatePDF: false,\r\n    generateJSON: false,\r\n  });\r\n\r\n  return {\r\n    // ‚úÖ This is the FIX ‚Äî pass the drawings (MCP's sessionData) as attempts\r\n    attempts: drawings,\r\n    metrics,\r\n    fatigueInfo,\r\n    strokeSpeedData,\r\n    micrographiaData,\r\n    tremorData,\r\n    digitAccuracy,\r\n    progressReport,\r\n    patientName: this.patientName,\r\n    sessionId: this.sessionId,\r\n  };\r\n}\r\n\r\n}\r\n"],"mappings":"AAAA,eAAe,MAAMA,mBAAmB,CAAC;EACzCC,WAAWA,CAACC,WAAW,GAAG,WAAW,EAAEC,GAAG,GAAG,IAAI,EAAE;IACjD,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACE,MAAM,GAAG,CAAC,GAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IACnC,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,QAAQ,GAAG,EAAE,CAAC,CAAC;IACpB,IAAI,CAACC,SAAS,GAAG,WAAWC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IACxC,IAAI,CAACR,GAAG,GAAGA,GAAG;EAChB;EAGES,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACR,MAAM,CAAC,IAAI,CAACG,YAAY,CAAC;EACvC;EAEAM,UAAUA,CAAA,EAAG;IAAA,IAAAC,SAAA,EAAAC,qBAAA;IACX,MAAMC,QAAQ,IAAAF,SAAA,GAAG,IAAI,CAACX,GAAG,cAAAW,SAAA,wBAAAC,qBAAA,GAARD,SAAA,CAAUG,WAAW,cAAAF,qBAAA,uBAArBA,qBAAA,CAAwB,IAAI,CAACR,YAAY,CAAC;IAC3D,OAAO,CAAAS,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,OAAO,KAAI,EAAE;EAChC;EAEAC,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAACZ,YAAY,GAAG,IAAI,CAACH,MAAM,CAACgB,MAAM,GAAG,CAAC,EAAE;MAC9C,IAAI,CAACb,YAAY,EAAE;IACrB;EACF;EAEAc,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACd,YAAY,IAAI,IAAI,CAACH,MAAM,CAACgB,MAAM,GAAG,CAAC;EACpD;;EAEA;EACF;EACA,MAAME,cAAcA,CAACC,OAAO,EAAEC,WAAW,EAAE;IACzC;IACA,MAAM;MAAEC,cAAc;MAAEC;IAAa,CAAC,GAAG,MAAM,IAAI,CAACvB,GAAG,CAACmB,cAAc,CACpEC,OAAO,EACPC,WAAW,CAAQ;IACrB,CAAC;;IAED;IACA,IAAI,CAAChB,QAAQ,CAACmB,IAAI,CAAC;MACjBH,WAAW;MACXC,cAAc;MACdG,OAAO,EAAEH,cAAc,KAAKD,WAAW;MACvCE,YAAY;MACZG,SAAS,EAAE,IAAInB,IAAI,CAAC,CAAC,CAACoB,WAAW,CAAC;IACpC,CAAC,CAAC;;IAEF;IACA,OAAO;MAAEL,cAAc;MAAEC;IAAa,CAAC;EACzC;;EAKE;EACF,MAAMK,UAAUA,CAAA,EAAG;IACjB,MAAM;MACJC,QAAQ;MACRC,OAAO;MACPC,WAAW;MACXC,eAAe;MACfC,gBAAgB;MAChBC,UAAU;MACVC,aAAa;MACbC;IACF,CAAC,GAAG,MAAM,IAAI,CAACpC,GAAG,CAAC4B,UAAU,CAAC;MAC5BS,eAAe,EAAE,IAAI;MACrBC,WAAW,EAAE,KAAK;MAClBC,YAAY,EAAE;IAChB,CAAC,CAAC;IAEF,OAAO;MACL;MACAlC,QAAQ,EAAEwB,QAAQ;MAClBC,OAAO;MACPC,WAAW;MACXC,eAAe;MACfC,gBAAgB;MAChBC,UAAU;MACVC,aAAa;MACbC,cAAc;MACdrC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BO,SAAS,EAAE,IAAI,CAACA;IAClB,CAAC;EACH;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}