{"ast":null,"code":"import * as tf from '@tensorflow/tfjs';\nlet model = null;\nlet currentLanguage = null;\nexport async function loadModel(lang = \"en\") {\n  if (model && currentLanguage === lang) return model;\n  const path = lang === \"ar\" ? \"/models/model_tfjs_hala/model_tfjs/model.json\" : \"/models/ENGLISH/model.json\";\n  try {\n    model = await tf.loadLayersModel(path);\n    currentLanguage = lang;\n    console.log(`✅ ${lang.toUpperCase()} model loaded.`);\n  } catch (error) {\n    console.error(`❌ Failed to load ${lang} model:`, error);\n    throw error;\n  }\n  return model;\n}\nexport async function predictDigit(dataURL, lang = \"en\", profile = null) {\n  await loadModel(lang);\n  const tensor = await preprocessDrawing(dataURL, profile);\n  const prediction = model.predict(tensor);\n  const predictionArray = await prediction.array();\n  const predictedDigit = predictionArray[0].indexOf(Math.max(...predictionArray[0]));\n  return predictedDigit;\n}\nexport async function preprocessDrawing(dataURL, profile = null) {\n  const image = new Image();\n  image.src = dataURL;\n  await new Promise(res => image.onload = res);\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = image.width;\n  canvas.height = image.height;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.drawImage(image, 0, 0);\n  return await preprocessCanvas(canvas, profile);\n}\nexport async function preprocessCanvas(canvas, profile = null) {\n  const resized = document.createElement(\"canvas\");\n  resized.width = 28;\n  resized.height = 28;\n  const resizedCtx = resized.getContext(\"2d\");\n  resizedCtx.drawImage(canvas, 0, 0, 28, 28);\n  const imgData = resizedCtx.getImageData(0, 0, 28, 28);\n  const data = imgData.data;\n  const gray = [];\n  for (let i = 0; i < data.length; i += 4) {\n    const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n    gray.push(1.0 - avg / 255); // grayscale + invert\n  }\n  let tensor = tf.tensor2d(gray, [28, 28]);\n\n  // 🧠 Auto-profile if none explicitly passed\n  if (!profile) {\n    profile = detectProfile(tensor);\n    console.log(\"🧠 Auto-selected profile:\", profile);\n  }\n  tensor = centerImage(tensor);\n  tensor = gaussianSmooth(tensor);\n  if (profile === \"parkinson-enhanced\") {\n    if (tensor.sum().arraySync() < 30) {\n      tensor = dilate(tensor); // Only apply dilation to very faint ones\n    }\n    tensor = binarize(tensor, 0.25);\n  }\n  const input = tensor.reshape([1, 28, 28, 1]);\n  if (process.env.NODE_ENV === \"development\") {\n    const debugCanvas = document.createElement(\"canvas\");\n    debugCanvas.width = 28;\n    debugCanvas.height = 28;\n    await tf.browser.toPixels(tensor, debugCanvas);\n    console.log(\"🧪 Preprocessed image base64:\", debugCanvas.toDataURL(\"image/png\"));\n  }\n  return input;\n}\n\n// ------------------- Core Functions -------------------\n\nfunction centerImage(tensor) {\n  const sum = tensor.sum().arraySync();\n  if (sum === 0) return tensor;\n  const arr = tensor.arraySync();\n  let cx = 0,\n    cy = 0;\n  for (let y = 0; y < 28; y++) {\n    for (let x = 0; x < 28; x++) {\n      const val = arr[y][x];\n      cx += x * val;\n      cy += y * val;\n    }\n  }\n  cx /= sum;\n  cy /= sum;\n  const shiftX = Math.round(14 - cx);\n  const shiftY = Math.round(14 - cy);\n  const padded = tf.pad(tensor, [[1, 1], [1, 1]], 0);\n  const begin = [1 - shiftY, 1 - shiftX];\n  const size = [28, 28];\n  const safeBegin = begin.map(v => Math.max(0, Math.min(2, v)));\n  return tf.slice(padded, safeBegin, size);\n}\nfunction gaussianSmooth(tensor) {\n  const kernel = tf.tensor2d([[1, 2, 1], [2, 4, 2], [1, 2, 1]]).div(16).reshape([3, 3, 1, 1]);\n  const input = tensor.reshape([1, 28, 28, 1]);\n  const blurred = tf.conv2d(input, kernel, 1, 'same');\n  return blurred.reshape([28, 28]);\n}\nfunction dilate(tensor) {\n  const expanded = tensor.reshape([1, 28, 28, 1]);\n  const dilated = tf.maxPool(expanded, [3, 3], [1, 1], 'same');\n  return dilated.reshape([28, 28]);\n}\nfunction binarize(tensor, threshold = 0.25) {\n  return tensor.greater(tf.scalar(threshold)).toFloat();\n}\n\n// ------------------- Auto-Profiling -------------------\n\nfunction detectProfile(tensor) {\n  const pixelSum = tensor.sum().arraySync();\n  const binary = tensor.greater(tf.scalar(0.15)).toFloat();\n  const activePixels = binary.sum().arraySync();\n  const isFaint = pixelSum < 40;\n  const isSmall = activePixels < 120;\n  const isThin = activePixels < 80 && pixelSum / activePixels < 0.5; // very light strokes\n\n  if (isFaint || isSmall || isThin) return \"parkinson-enhanced\";\n  return \"standard\";\n}","map":{"version":3,"names":["tf","model","currentLanguage","loadModel","lang","path","loadLayersModel","console","log","toUpperCase","error","predictDigit","dataURL","profile","tensor","preprocessDrawing","prediction","predict","predictionArray","array","predictedDigit","indexOf","Math","max","image","Image","src","Promise","res","onload","canvas","document","createElement","width","height","ctx","getContext","drawImage","preprocessCanvas","resized","resizedCtx","imgData","getImageData","data","gray","i","length","avg","push","tensor2d","detectProfile","centerImage","gaussianSmooth","sum","arraySync","dilate","binarize","input","reshape","process","env","NODE_ENV","debugCanvas","browser","toPixels","toDataURL","arr","cx","cy","y","x","val","shiftX","round","shiftY","padded","pad","begin","size","safeBegin","map","v","min","slice","kernel","div","blurred","conv2d","expanded","dilated","maxPool","threshold","greater","scalar","toFloat","pixelSum","binary","activePixels","isFaint","isSmall","isThin"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/cnnAgent.js"],"sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\n\r\nlet model = null;\r\nlet currentLanguage = null;\r\n\r\nexport async function loadModel(lang = \"en\") {\r\n  if (model && currentLanguage === lang) return model;\r\n\r\n  const path = lang === \"ar\"\r\n    ? \"/models/model_tfjs_hala/model_tfjs/model.json\"\r\n    : \"/models/ENGLISH/model.json\";\r\n\r\n  try {\r\n    model = await tf.loadLayersModel(path);\r\n    currentLanguage = lang;\r\n    console.log(`✅ ${lang.toUpperCase()} model loaded.`);\r\n  } catch (error) {\r\n    console.error(`❌ Failed to load ${lang} model:`, error);\r\n    throw error;\r\n  }\r\n\r\n  return model;\r\n}\r\n\r\nexport async function predictDigit(dataURL, lang = \"en\", profile = null) {\r\n  await loadModel(lang);\r\n\r\n  const tensor = await preprocessDrawing(dataURL, profile);\r\n  const prediction = model.predict(tensor);\r\n  const predictionArray = await prediction.array();\r\n  const predictedDigit = predictionArray[0].indexOf(Math.max(...predictionArray[0]));\r\n\r\n  return predictedDigit;\r\n}\r\n\r\nexport async function preprocessDrawing(dataURL, profile = null) {\r\n  const image = new Image();\r\n  image.src = dataURL;\r\n  await new Promise((res) => (image.onload = res));\r\n\r\n  const canvas = document.createElement(\"canvas\");\r\n  canvas.width = image.width;\r\n  canvas.height = image.height;\r\n  const ctx = canvas.getContext(\"2d\");\r\n  ctx.drawImage(image, 0, 0);\r\n\r\n  return await preprocessCanvas(canvas, profile);\r\n}\r\n\r\nexport async function preprocessCanvas(canvas, profile = null) {\r\n  const resized = document.createElement(\"canvas\");\r\n  resized.width = 28;\r\n  resized.height = 28;\r\n  const resizedCtx = resized.getContext(\"2d\");\r\n  resizedCtx.drawImage(canvas, 0, 0, 28, 28);\r\n\r\n  const imgData = resizedCtx.getImageData(0, 0, 28, 28);\r\n  const data = imgData.data;\r\n  const gray = [];\r\n  for (let i = 0; i < data.length; i += 4) {\r\n    const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\r\n    gray.push(1.0 - avg / 255); // grayscale + invert\r\n  }\r\n\r\n  let tensor = tf.tensor2d(gray, [28, 28]);\r\n\r\n  // 🧠 Auto-profile if none explicitly passed\r\n  if (!profile) {\r\n    profile = detectProfile(tensor);\r\n    console.log(\"🧠 Auto-selected profile:\", profile);\r\n  }\r\n\r\n  tensor = centerImage(tensor);\r\n  tensor = gaussianSmooth(tensor);\r\n\r\n  if (profile === \"parkinson-enhanced\") {\r\n  if (tensor.sum().arraySync() < 30) {\r\n    tensor = dilate(tensor); // Only apply dilation to very faint ones\r\n  }\r\n  tensor = binarize(tensor, 0.25);\r\n}\r\n\r\n\r\n  const input = tensor.reshape([1, 28, 28, 1]);\r\n\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    const debugCanvas = document.createElement(\"canvas\");\r\n    debugCanvas.width = 28;\r\n    debugCanvas.height = 28;\r\n    await tf.browser.toPixels(tensor, debugCanvas);\r\n    console.log(\"🧪 Preprocessed image base64:\", debugCanvas.toDataURL(\"image/png\"));\r\n  }\r\n\r\n  return input;\r\n}\r\n\r\n// ------------------- Core Functions -------------------\r\n\r\nfunction centerImage(tensor) {\r\n  const sum = tensor.sum().arraySync();\r\n  if (sum === 0) return tensor;\r\n\r\n  const arr = tensor.arraySync();\r\n  let cx = 0, cy = 0;\r\n\r\n  for (let y = 0; y < 28; y++) {\r\n    for (let x = 0; x < 28; x++) {\r\n      const val = arr[y][x];\r\n      cx += x * val;\r\n      cy += y * val;\r\n    }\r\n  }\r\n\r\n  cx /= sum;\r\n  cy /= sum;\r\n\r\n  const shiftX = Math.round(14 - cx);\r\n  const shiftY = Math.round(14 - cy);\r\n\r\n  const padded = tf.pad(tensor, [[1, 1], [1, 1]], 0);\r\n  const begin = [1 - shiftY, 1 - shiftX];\r\n  const size = [28, 28];\r\n  const safeBegin = begin.map(v => Math.max(0, Math.min(2, v)));\r\n\r\n  return tf.slice(padded, safeBegin, size);\r\n}\r\n\r\nfunction gaussianSmooth(tensor) {\r\n  const kernel = tf.tensor2d([\r\n    [1, 2, 1],\r\n    [2, 4, 2],\r\n    [1, 2, 1]\r\n  ]).div(16).reshape([3, 3, 1, 1]);\r\n\r\n  const input = tensor.reshape([1, 28, 28, 1]);\r\n  const blurred = tf.conv2d(input, kernel, 1, 'same');\r\n  return blurred.reshape([28, 28]);\r\n}\r\n\r\nfunction dilate(tensor) {\r\n  const expanded = tensor.reshape([1, 28, 28, 1]);\r\n  const dilated = tf.maxPool(expanded, [3, 3], [1, 1], 'same');\r\n  return dilated.reshape([28, 28]);\r\n}\r\n\r\nfunction binarize(tensor, threshold = 0.25) {\r\n  return tensor.greater(tf.scalar(threshold)).toFloat();\r\n}\r\n\r\n// ------------------- Auto-Profiling -------------------\r\n\r\nfunction detectProfile(tensor) {\r\n  const pixelSum = tensor.sum().arraySync();\r\n  const binary = tensor.greater(tf.scalar(0.15)).toFloat();\r\n  const activePixels = binary.sum().arraySync();\r\n\r\n  const isFaint = pixelSum < 40;\r\n  const isSmall = activePixels < 120;\r\n  const isThin = activePixels < 80 && pixelSum / activePixels < 0.5; // very light strokes\r\n\r\n  if (isFaint || isSmall || isThin) return \"parkinson-enhanced\";\r\n  return \"standard\";\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}