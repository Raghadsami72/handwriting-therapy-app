{"ast":null,"code":"// agents/cnnAgent.js\nimport * as tf from '@tensorflow/tfjs';\nlet model = null;\nlet currentLanguage = null;\nexport async function loadModel(lang = \"en\") {\n  if (model && currentLanguage === lang) return model;\n  const path = lang === \"ar\" ? \"/models/arabic_model/model.json\" : \"/models/Final_PreluModel/model.json\";\n  try {\n    model = await tf.loadLayersModel(path);\n    currentLanguage = lang;\n    console.log(`‚úÖ ${lang.toUpperCase()} model loaded.`);\n  } catch (error) {\n    console.error(`‚ùå Failed to load ${lang} model:`, error);\n    throw error;\n  }\n  return model;\n}\nexport async function predictDigit(dataURL, lang = \"en\") {\n  await loadModel(lang);\n  const {\n    tensor,\n    debugCanvas\n  } = await preprocessDrawing(dataURL, lang === 'en');\n  const prediction = model.predict(tensor);\n  const predictionArray = await prediction.array();\n  const predictedDigit = predictionArray[0].indexOf(Math.max(...predictionArray[0]));\n  return {\n    predictedDigit,\n    debugCanvas\n  };\n}\nasync function preprocessDrawing(dataURL, invert = true) {\n  const image = new Image();\n  image.src = dataURL;\n  await new Promise(res => image.onload = res);\n  return tf.tidy(() => {\n    let tensor = tf.browser.fromPixels(image, 1).resizeNearestNeighbor([28, 28]).toFloat();\n    if (invert) tensor = tf.sub(255, tensor);\n    const normalized = tensor.div(255.0);\n    const expanded = normalized.expandDims(0);\n\n    // üñºÔ∏è Debug preview canvas\n    const debugCanvas = document.createElement(\"canvas\");\n    debugCanvas.width = 28;\n    debugCanvas.height = 28;\n    tf.browser.toPixels(normalized.squeeze(), debugCanvas);\n    return {\n      tensor: expanded,\n      debugCanvas\n    };\n  });\n}","map":{"version":3,"names":["tf","model","currentLanguage","loadModel","lang","path","loadLayersModel","console","log","toUpperCase","error","predictDigit","dataURL","tensor","debugCanvas","preprocessDrawing","prediction","predict","predictionArray","array","predictedDigit","indexOf","Math","max","invert","image","Image","src","Promise","res","onload","tidy","browser","fromPixels","resizeNearestNeighbor","toFloat","sub","normalized","div","expanded","expandDims","document","createElement","width","height","toPixels","squeeze"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/cnnAgent.js"],"sourcesContent":["// agents/cnnAgent.js\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\nlet model = null;\r\nlet currentLanguage = null;\r\n\r\nexport async function loadModel(lang = \"en\") {\r\n  if (model && currentLanguage === lang) return model;\r\n\r\n  const path = lang === \"ar\"\r\n    ? \"/models/arabic_model/model.json\"\r\n    : \"/models/Final_PreluModel/model.json\";\r\n\r\n  try {\r\n    model = await tf.loadLayersModel(path);\r\n    currentLanguage = lang;\r\n    console.log(`‚úÖ ${lang.toUpperCase()} model loaded.`);\r\n  } catch (error) {\r\n    console.error(`‚ùå Failed to load ${lang} model:`, error);\r\n    throw error;\r\n  }\r\n\r\n  return model;\r\n}\r\n\r\nexport async function predictDigit(dataURL, lang = \"en\") {\r\n  await loadModel(lang);\r\n  const { tensor, debugCanvas } = await preprocessDrawing(dataURL, lang === 'en');\r\n\r\n  const prediction = model.predict(tensor);\r\n  const predictionArray = await prediction.array();\r\n  const predictedDigit = predictionArray[0].indexOf(Math.max(...predictionArray[0]));\r\n\r\n  return { predictedDigit, debugCanvas };\r\n}\r\n\r\n\r\nasync function preprocessDrawing(dataURL, invert = true) {\r\n  const image = new Image();\r\n  image.src = dataURL;\r\n  await new Promise((res) => (image.onload = res));\r\n\r\n  return tf.tidy(() => {\r\n    let tensor = tf.browser.fromPixels(image, 1)\r\n      .resizeNearestNeighbor([28, 28])\r\n      .toFloat();\r\n\r\n    if (invert) tensor = tf.sub(255, tensor);\r\n\r\n    const normalized = tensor.div(255.0);\r\n    const expanded = normalized.expandDims(0);\r\n\r\n    // üñºÔ∏è Debug preview canvas\r\n    const debugCanvas = document.createElement(\"canvas\");\r\n    debugCanvas.width = 28;\r\n    debugCanvas.height = 28;\r\n    tf.browser.toPixels(normalized.squeeze(), debugCanvas);\r\n\r\n    return { tensor: expanded, debugCanvas };\r\n  });\r\n}\r\n\r\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,EAAE,MAAM,kBAAkB;AAEtC,IAAIC,KAAK,GAAG,IAAI;AAChB,IAAIC,eAAe,GAAG,IAAI;AAE1B,OAAO,eAAeC,SAASA,CAACC,IAAI,GAAG,IAAI,EAAE;EAC3C,IAAIH,KAAK,IAAIC,eAAe,KAAKE,IAAI,EAAE,OAAOH,KAAK;EAEnD,MAAMI,IAAI,GAAGD,IAAI,KAAK,IAAI,GACtB,iCAAiC,GACjC,qCAAqC;EAEzC,IAAI;IACFH,KAAK,GAAG,MAAMD,EAAE,CAACM,eAAe,CAACD,IAAI,CAAC;IACtCH,eAAe,GAAGE,IAAI;IACtBG,OAAO,CAACC,GAAG,CAAC,KAAKJ,IAAI,CAACK,WAAW,CAAC,CAAC,gBAAgB,CAAC;EACtD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,oBAAoBN,IAAI,SAAS,EAAEM,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;EAEA,OAAOT,KAAK;AACd;AAEA,OAAO,eAAeU,YAAYA,CAACC,OAAO,EAAER,IAAI,GAAG,IAAI,EAAE;EACvD,MAAMD,SAAS,CAACC,IAAI,CAAC;EACrB,MAAM;IAAES,MAAM;IAAEC;EAAY,CAAC,GAAG,MAAMC,iBAAiB,CAACH,OAAO,EAAER,IAAI,KAAK,IAAI,CAAC;EAE/E,MAAMY,UAAU,GAAGf,KAAK,CAACgB,OAAO,CAACJ,MAAM,CAAC;EACxC,MAAMK,eAAe,GAAG,MAAMF,UAAU,CAACG,KAAK,CAAC,CAAC;EAChD,MAAMC,cAAc,GAAGF,eAAe,CAAC,CAAC,CAAC,CAACG,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGL,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;EAElF,OAAO;IAAEE,cAAc;IAAEN;EAAY,CAAC;AACxC;AAGA,eAAeC,iBAAiBA,CAACH,OAAO,EAAEY,MAAM,GAAG,IAAI,EAAE;EACvD,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;EACzBD,KAAK,CAACE,GAAG,GAAGf,OAAO;EACnB,MAAM,IAAIgB,OAAO,CAAEC,GAAG,IAAMJ,KAAK,CAACK,MAAM,GAAGD,GAAI,CAAC;EAEhD,OAAO7B,EAAE,CAAC+B,IAAI,CAAC,MAAM;IACnB,IAAIlB,MAAM,GAAGb,EAAE,CAACgC,OAAO,CAACC,UAAU,CAACR,KAAK,EAAE,CAAC,CAAC,CACzCS,qBAAqB,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAC/BC,OAAO,CAAC,CAAC;IAEZ,IAAIX,MAAM,EAAEX,MAAM,GAAGb,EAAE,CAACoC,GAAG,CAAC,GAAG,EAAEvB,MAAM,CAAC;IAExC,MAAMwB,UAAU,GAAGxB,MAAM,CAACyB,GAAG,CAAC,KAAK,CAAC;IACpC,MAAMC,QAAQ,GAAGF,UAAU,CAACG,UAAU,CAAC,CAAC,CAAC;;IAEzC;IACA,MAAM1B,WAAW,GAAG2B,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IACpD5B,WAAW,CAAC6B,KAAK,GAAG,EAAE;IACtB7B,WAAW,CAAC8B,MAAM,GAAG,EAAE;IACvB5C,EAAE,CAACgC,OAAO,CAACa,QAAQ,CAACR,UAAU,CAACS,OAAO,CAAC,CAAC,EAAEhC,WAAW,CAAC;IAEtD,OAAO;MAAED,MAAM,EAAE0B,QAAQ;MAAEzB;IAAY,CAAC;EAC1C,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}