{"ast":null,"code":"import * as tf from '@tensorflow/tfjs';\nlet model = null;\nlet currentLanguage = null;\nexport async function loadModel(lang = \"en\") {\n  if (model && currentLanguage === lang) return model;\n  const path = lang === \"ar\" ? \"/models/model_tfjs_halall/model_tfjs/model.json\" : \"/models/ENGLISH/model.json\";\n  try {\n    model = await tf.loadLayersModel(path);\n    currentLanguage = lang;\n    console.log(`✅ ${lang.toUpperCase()} model loaded.`);\n  } catch (error) {\n    console.error(`❌ Failed to load ${lang} model:`, error);\n    throw error;\n  }\n  return model;\n}\nexport async function predictDigit(dataURL, lang = \"en\", profile = null, archiveArray = null, patientName = \"Anonymous\") {\n  await loadModel(lang);\n  const {\n    tensor,\n    debugCanvas\n  } = await preprocessDrawing(dataURL, profile, true);\n  const prediction = model.predict(tensor);\n  const predictionArray = await prediction.array();\n  const predictedDigit = predictionArray[0].indexOf(Math.max(...predictionArray[0]));\n  if (archiveArray && debugCanvas) {\n    const blob = await new Promise(res => debugCanvas.toBlob(res, \"image/png\"));\n    const timestamp = Date.now();\n    archiveArray.push({\n      name: `digit_${predictedDigit}_${timestamp}.png`,\n      blob\n    });\n    const metaBlob = new Blob([`Prediction: ${predictedDigit}\\nTimestamp: ${timestamp}\\nPatient: ${patientName}`], {\n      type: \"text/plain\"\n    });\n    archiveArray.push({\n      name: `digit_${predictedDigit}_${timestamp}.txt`,\n      blob: metaBlob\n    });\n    console.log(\"🧪 Preprocessed image (debug view):\", debugCanvas.toDataURL(\"image/png\"));\n  }\n  return predictedDigit;\n}\nexport async function preprocessDrawing(dataURL, profile = null, includeCanvas = false) {\n  const image = new Image();\n  image.src = dataURL;\n  await new Promise(res => image.onload = res);\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = image.width;\n  canvas.height = image.height;\n  canvas.getContext(\"2d\").drawImage(image, 0, 0);\n  return await preprocessCanvas(canvas, profile, includeCanvas);\n}\nexport async function preprocessCanvas(canvas, profile = null, includeCanvas = false) {\n  return tf.tidy(() => {\n    const resized = document.createElement(\"canvas\");\n    resized.width = 28;\n    resized.height = 28;\n    resized.getContext(\"2d\").drawImage(canvas, 0, 0, 28, 28);\n    const imgData = resized.getContext(\"2d\").getImageData(0, 0, 28, 28).data;\n    const gray = new Float32Array(28 * 28);\n    for (let i = 0; i < imgData.length; i += 4) {\n      gray[i / 4] = 1.0 - (imgData[i] + imgData[i + 1] + imgData[i + 2]) / 765;\n    }\n    let tensor = tf.tensor2d(gray, [28, 28]);\n    const pixelSum = tensor.sum().dataSync()[0];\n    const activePixels = tensor.greater(tf.scalar(0.15)).sum().dataSync()[0];\n    const isVerySmall = activePixels < 60 || pixelSum < 25;\n    if (!profile) {\n      profile = detectProfile(pixelSum, activePixels);\n      console.log(\"🧠 Auto-selected profile:\", profile);\n    }\n    tensor = centerImage(tensor);\n    if (!isVerySmall) {\n      tensor = gaussianSmooth(tensor);\n    }\n    if (profile === \"parkinson-enhanced\" && !isVerySmall) {\n      if (tensor.sum().dataSync()[0] < 30) {\n        tensor = dilate(tensor);\n      }\n      tensor = binarize(tensor, 0.25);\n    }\n    const input = tensor.reshape([1, 28, 28, 1]);\n    let debugCanvas = null;\n    if (includeCanvas) {\n      debugCanvas = document.createElement(\"canvas\");\n      debugCanvas.width = 28;\n      debugCanvas.height = 28;\n      tf.browser.toPixels(tensor, debugCanvas);\n    }\n    return {\n      tensor: input,\n      debugCanvas\n    };\n  });\n}\nfunction detectProfile(pixelSum, activePixels) {\n  const isFaint = pixelSum < 40;\n  const isSmall = activePixels < 120;\n  const isThin = activePixels < 80 && pixelSum / activePixels < 0.5;\n  return isFaint || isSmall || isThin ? \"parkinson-enhanced\" : \"standard\";\n}\nfunction centerImage(tensor) {\n  const arr = tensor.arraySync();\n  let cx = 0,\n    cy = 0,\n    sum = 0;\n  for (let y = 0; y < 28; y++) {\n    for (let x = 0; x < 28; x++) {\n      const val = arr[y][x];\n      sum += val;\n      cx += x * val;\n      cy += y * val;\n    }\n  }\n  if (sum === 0) return tensor;\n  cx /= sum;\n  cy /= sum;\n  const shiftX = Math.round(14 - cx);\n  const shiftY = Math.round(14 - cy);\n  const padded = tf.pad(tensor, [[1, 1], [1, 1]], 0);\n  const begin = [1 - shiftY, 1 - shiftX].map(v => Math.max(0, Math.min(2, v)));\n  return tf.slice(padded, begin, [28, 28]);\n}\nfunction gaussianSmooth(tensor) {\n  const kernel = tf.tensor4d([[[[1]], [[2]], [[1]]], [[[2]], [[4]], [[2]]], [[[1]], [[2]], [[1]]]], [3, 3, 1, 1]).div(16);\n  return tf.conv2d(tensor.reshape([1, 28, 28, 1]), kernel, 1, 'same').reshape([28, 28]);\n}\nfunction dilate(tensor) {\n  return tf.maxPool(tensor.reshape([1, 28, 28, 1]), [3, 3], [1, 1], 'same').reshape([28, 28]);\n}\nfunction binarize(tensor, threshold = 0.25) {\n  return tensor.greater(tf.scalar(threshold)).toFloat();\n}","map":{"version":3,"names":["tf","model","currentLanguage","loadModel","lang","path","loadLayersModel","console","log","toUpperCase","error","predictDigit","dataURL","profile","archiveArray","patientName","tensor","debugCanvas","preprocessDrawing","prediction","predict","predictionArray","array","predictedDigit","indexOf","Math","max","blob","Promise","res","toBlob","timestamp","Date","now","push","name","metaBlob","Blob","type","toDataURL","includeCanvas","image","Image","src","onload","canvas","document","createElement","width","height","getContext","drawImage","preprocessCanvas","tidy","resized","imgData","getImageData","data","gray","Float32Array","i","length","tensor2d","pixelSum","sum","dataSync","activePixels","greater","scalar","isVerySmall","detectProfile","centerImage","gaussianSmooth","dilate","binarize","input","reshape","browser","toPixels","isFaint","isSmall","isThin","arr","arraySync","cx","cy","y","x","val","shiftX","round","shiftY","padded","pad","begin","map","v","min","slice","kernel","tensor4d","div","conv2d","maxPool","threshold","toFloat"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/cnnAgent.js"],"sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\n\r\nlet model = null;\r\nlet currentLanguage = null;\r\n\r\nexport async function loadModel(lang = \"en\") {\r\n  if (model && currentLanguage === lang) return model;\r\n\r\n  const path = lang === \"ar\"\r\n    ? \"/models/model_tfjs_halall/model_tfjs/model.json\"\r\n    : \"/models/ENGLISH/model.json\";\r\n\r\n  try {\r\n    model = await tf.loadLayersModel(path);\r\n    currentLanguage = lang;\r\n    console.log(`✅ ${lang.toUpperCase()} model loaded.`);\r\n  } catch (error) {\r\n    console.error(`❌ Failed to load ${lang} model:`, error);\r\n    throw error;\r\n  }\r\n\r\n  return model;\r\n}\r\n\r\nexport async function predictDigit(dataURL, lang = \"en\", profile = null, archiveArray = null, patientName = \"Anonymous\") {\r\n  await loadModel(lang);\r\n\r\n  const { tensor, debugCanvas } = await preprocessDrawing(dataURL, profile, true);\r\n  const prediction = model.predict(tensor);\r\n  const predictionArray = await prediction.array();\r\n  const predictedDigit = predictionArray[0].indexOf(Math.max(...predictionArray[0]));\r\n\r\n  if (archiveArray && debugCanvas) {\r\n    const blob = await new Promise(res => debugCanvas.toBlob(res, \"image/png\"));\r\n    const timestamp = Date.now();\r\n\r\n    archiveArray.push({\r\n      name: `digit_${predictedDigit}_${timestamp}.png`,\r\n      blob,\r\n    });\r\n\r\n    const metaBlob = new Blob([`Prediction: ${predictedDigit}\\nTimestamp: ${timestamp}\\nPatient: ${patientName}`], {\r\n      type: \"text/plain\",\r\n    });\r\n\r\n    archiveArray.push({\r\n      name: `digit_${predictedDigit}_${timestamp}.txt`,\r\n      blob: metaBlob,\r\n    });\r\n\r\n    console.log(\"🧪 Preprocessed image (debug view):\", debugCanvas.toDataURL(\"image/png\"));\r\n  }\r\n\r\n  return predictedDigit;\r\n}\r\n\r\nexport async function preprocessDrawing(dataURL, profile = null, includeCanvas = false) {\r\n  const image = new Image();\r\n  image.src = dataURL;\r\n  await new Promise((res) => (image.onload = res));\r\n\r\n  const canvas = document.createElement(\"canvas\");\r\n  canvas.width = image.width;\r\n  canvas.height = image.height;\r\n  canvas.getContext(\"2d\").drawImage(image, 0, 0);\r\n\r\n  return await preprocessCanvas(canvas, profile, includeCanvas);\r\n}\r\n\r\nexport async function preprocessCanvas(canvas, profile = null, includeCanvas = false) {\r\n  return tf.tidy(() => {\r\n    const resized = document.createElement(\"canvas\");\r\n    resized.width = 28;\r\n    resized.height = 28;\r\n    resized.getContext(\"2d\").drawImage(canvas, 0, 0, 28, 28);\r\n\r\n    const imgData = resized.getContext(\"2d\").getImageData(0, 0, 28, 28).data;\r\n    const gray = new Float32Array(28 * 28);\r\n\r\n    for (let i = 0; i < imgData.length; i += 4) {\r\n      gray[i / 4] = 1.0 - (imgData[i] + imgData[i + 1] + imgData[i + 2]) / 765;\r\n    }\r\n\r\n    let tensor = tf.tensor2d(gray, [28, 28]);\r\n\r\n    const pixelSum = tensor.sum().dataSync()[0];\r\n    const activePixels = tensor.greater(tf.scalar(0.15)).sum().dataSync()[0];\r\n    const isVerySmall = activePixels < 60 || pixelSum < 25;\r\n\r\n    if (!profile) {\r\n      profile = detectProfile(pixelSum, activePixels);\r\n      console.log(\"🧠 Auto-selected profile:\", profile);\r\n    }\r\n\r\n    tensor = centerImage(tensor);\r\n\r\n    if (!isVerySmall) {\r\n      tensor = gaussianSmooth(tensor);\r\n    }\r\n\r\n    if (profile === \"parkinson-enhanced\" && !isVerySmall) {\r\n      if (tensor.sum().dataSync()[0] < 30) {\r\n        tensor = dilate(tensor);\r\n      }\r\n      tensor = binarize(tensor, 0.25);\r\n    }\r\n\r\n    const input = tensor.reshape([1, 28, 28, 1]);\r\n\r\n    let debugCanvas = null;\r\n    if (includeCanvas) {\r\n      debugCanvas = document.createElement(\"canvas\");\r\n      debugCanvas.width = 28;\r\n      debugCanvas.height = 28;\r\n      tf.browser.toPixels(tensor, debugCanvas);\r\n    }\r\n\r\n    return { tensor: input, debugCanvas };\r\n  });\r\n}\r\n\r\nfunction detectProfile(pixelSum, activePixels) {\r\n  const isFaint = pixelSum < 40;\r\n  const isSmall = activePixels < 120;\r\n  const isThin = activePixels < 80 && pixelSum / activePixels < 0.5;\r\n  return isFaint || isSmall || isThin ? \"parkinson-enhanced\" : \"standard\";\r\n}\r\n\r\nfunction centerImage(tensor) {\r\n  const arr = tensor.arraySync();\r\n  let cx = 0, cy = 0, sum = 0;\r\n\r\n  for (let y = 0; y < 28; y++) {\r\n    for (let x = 0; x < 28; x++) {\r\n      const val = arr[y][x];\r\n      sum += val;\r\n      cx += x * val;\r\n      cy += y * val;\r\n    }\r\n  }\r\n\r\n  if (sum === 0) return tensor;\r\n\r\n  cx /= sum;\r\n  cy /= sum;\r\n\r\n  const shiftX = Math.round(14 - cx);\r\n  const shiftY = Math.round(14 - cy);\r\n\r\n  const padded = tf.pad(tensor, [[1, 1], [1, 1]], 0);\r\n  const begin = [1 - shiftY, 1 - shiftX].map(v => Math.max(0, Math.min(2, v)));\r\n  return tf.slice(padded, begin, [28, 28]);\r\n}\r\n\r\nfunction gaussianSmooth(tensor) {\r\n  const kernel = tf.tensor4d([\r\n    [[[1]], [[2]], [[1]]],\r\n    [[[2]], [[4]], [[2]]],\r\n    [[[1]], [[2]], [[1]]]\r\n  ], [3, 3, 1, 1]).div(16);\r\n\r\n  return tf.conv2d(tensor.reshape([1, 28, 28, 1]), kernel, 1, 'same').reshape([28, 28]);\r\n}\r\n\r\nfunction dilate(tensor) {\r\n  return tf.maxPool(tensor.reshape([1, 28, 28, 1]), [3, 3], [1, 1], 'same').reshape([28, 28]);\r\n}\r\n\r\nfunction binarize(tensor, threshold = 0.25) {\r\n  return tensor.greater(tf.scalar(threshold)).toFloat();\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,kBAAkB;AAEtC,IAAIC,KAAK,GAAG,IAAI;AAChB,IAAIC,eAAe,GAAG,IAAI;AAE1B,OAAO,eAAeC,SAASA,CAACC,IAAI,GAAG,IAAI,EAAE;EAC3C,IAAIH,KAAK,IAAIC,eAAe,KAAKE,IAAI,EAAE,OAAOH,KAAK;EAEnD,MAAMI,IAAI,GAAGD,IAAI,KAAK,IAAI,GACtB,iDAAiD,GACjD,4BAA4B;EAEhC,IAAI;IACFH,KAAK,GAAG,MAAMD,EAAE,CAACM,eAAe,CAACD,IAAI,CAAC;IACtCH,eAAe,GAAGE,IAAI;IACtBG,OAAO,CAACC,GAAG,CAAC,KAAKJ,IAAI,CAACK,WAAW,CAAC,CAAC,gBAAgB,CAAC;EACtD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,oBAAoBN,IAAI,SAAS,EAAEM,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;EAEA,OAAOT,KAAK;AACd;AAEA,OAAO,eAAeU,YAAYA,CAACC,OAAO,EAAER,IAAI,GAAG,IAAI,EAAES,OAAO,GAAG,IAAI,EAAEC,YAAY,GAAG,IAAI,EAAEC,WAAW,GAAG,WAAW,EAAE;EACvH,MAAMZ,SAAS,CAACC,IAAI,CAAC;EAErB,MAAM;IAAEY,MAAM;IAAEC;EAAY,CAAC,GAAG,MAAMC,iBAAiB,CAACN,OAAO,EAAEC,OAAO,EAAE,IAAI,CAAC;EAC/E,MAAMM,UAAU,GAAGlB,KAAK,CAACmB,OAAO,CAACJ,MAAM,CAAC;EACxC,MAAMK,eAAe,GAAG,MAAMF,UAAU,CAACG,KAAK,CAAC,CAAC;EAChD,MAAMC,cAAc,GAAGF,eAAe,CAAC,CAAC,CAAC,CAACG,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGL,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;EAElF,IAAIP,YAAY,IAAIG,WAAW,EAAE;IAC/B,MAAMU,IAAI,GAAG,MAAM,IAAIC,OAAO,CAACC,GAAG,IAAIZ,WAAW,CAACa,MAAM,CAACD,GAAG,EAAE,WAAW,CAAC,CAAC;IAC3E,MAAME,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAE5BnB,YAAY,CAACoB,IAAI,CAAC;MAChBC,IAAI,EAAE,SAASZ,cAAc,IAAIQ,SAAS,MAAM;MAChDJ;IACF,CAAC,CAAC;IAEF,MAAMS,QAAQ,GAAG,IAAIC,IAAI,CAAC,CAAC,eAAed,cAAc,gBAAgBQ,SAAS,cAAchB,WAAW,EAAE,CAAC,EAAE;MAC7GuB,IAAI,EAAE;IACR,CAAC,CAAC;IAEFxB,YAAY,CAACoB,IAAI,CAAC;MAChBC,IAAI,EAAE,SAASZ,cAAc,IAAIQ,SAAS,MAAM;MAChDJ,IAAI,EAAES;IACR,CAAC,CAAC;IAEF7B,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAES,WAAW,CAACsB,SAAS,CAAC,WAAW,CAAC,CAAC;EACxF;EAEA,OAAOhB,cAAc;AACvB;AAEA,OAAO,eAAeL,iBAAiBA,CAACN,OAAO,EAAEC,OAAO,GAAG,IAAI,EAAE2B,aAAa,GAAG,KAAK,EAAE;EACtF,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;EACzBD,KAAK,CAACE,GAAG,GAAG/B,OAAO;EACnB,MAAM,IAAIgB,OAAO,CAAEC,GAAG,IAAMY,KAAK,CAACG,MAAM,GAAGf,GAAI,CAAC;EAEhD,MAAMgB,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/CF,MAAM,CAACG,KAAK,GAAGP,KAAK,CAACO,KAAK;EAC1BH,MAAM,CAACI,MAAM,GAAGR,KAAK,CAACQ,MAAM;EAC5BJ,MAAM,CAACK,UAAU,CAAC,IAAI,CAAC,CAACC,SAAS,CAACV,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;EAE9C,OAAO,MAAMW,gBAAgB,CAACP,MAAM,EAAEhC,OAAO,EAAE2B,aAAa,CAAC;AAC/D;AAEA,OAAO,eAAeY,gBAAgBA,CAACP,MAAM,EAAEhC,OAAO,GAAG,IAAI,EAAE2B,aAAa,GAAG,KAAK,EAAE;EACpF,OAAOxC,EAAE,CAACqD,IAAI,CAAC,MAAM;IACnB,MAAMC,OAAO,GAAGR,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAChDO,OAAO,CAACN,KAAK,GAAG,EAAE;IAClBM,OAAO,CAACL,MAAM,GAAG,EAAE;IACnBK,OAAO,CAACJ,UAAU,CAAC,IAAI,CAAC,CAACC,SAAS,CAACN,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IAExD,MAAMU,OAAO,GAAGD,OAAO,CAACJ,UAAU,CAAC,IAAI,CAAC,CAACM,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAACC,IAAI;IACxE,MAAMC,IAAI,GAAG,IAAIC,YAAY,CAAC,EAAE,GAAG,EAAE,CAAC;IAEtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,CAACM,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MAC1CF,IAAI,CAACE,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAACL,OAAO,CAACK,CAAC,CAAC,GAAGL,OAAO,CAACK,CAAC,GAAG,CAAC,CAAC,GAAGL,OAAO,CAACK,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG;IAC1E;IAEA,IAAI5C,MAAM,GAAGhB,EAAE,CAAC8D,QAAQ,CAACJ,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAExC,MAAMK,QAAQ,GAAG/C,MAAM,CAACgD,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,MAAMC,YAAY,GAAGlD,MAAM,CAACmD,OAAO,CAACnE,EAAE,CAACoE,MAAM,CAAC,IAAI,CAAC,CAAC,CAACJ,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE,MAAMI,WAAW,GAAGH,YAAY,GAAG,EAAE,IAAIH,QAAQ,GAAG,EAAE;IAEtD,IAAI,CAAClD,OAAO,EAAE;MACZA,OAAO,GAAGyD,aAAa,CAACP,QAAQ,EAAEG,YAAY,CAAC;MAC/C3D,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEK,OAAO,CAAC;IACnD;IAEAG,MAAM,GAAGuD,WAAW,CAACvD,MAAM,CAAC;IAE5B,IAAI,CAACqD,WAAW,EAAE;MAChBrD,MAAM,GAAGwD,cAAc,CAACxD,MAAM,CAAC;IACjC;IAEA,IAAIH,OAAO,KAAK,oBAAoB,IAAI,CAACwD,WAAW,EAAE;MACpD,IAAIrD,MAAM,CAACgD,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE;QACnCjD,MAAM,GAAGyD,MAAM,CAACzD,MAAM,CAAC;MACzB;MACAA,MAAM,GAAG0D,QAAQ,CAAC1D,MAAM,EAAE,IAAI,CAAC;IACjC;IAEA,MAAM2D,KAAK,GAAG3D,MAAM,CAAC4D,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IAE5C,IAAI3D,WAAW,GAAG,IAAI;IACtB,IAAIuB,aAAa,EAAE;MACjBvB,WAAW,GAAG6B,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC9C9B,WAAW,CAAC+B,KAAK,GAAG,EAAE;MACtB/B,WAAW,CAACgC,MAAM,GAAG,EAAE;MACvBjD,EAAE,CAAC6E,OAAO,CAACC,QAAQ,CAAC9D,MAAM,EAAEC,WAAW,CAAC;IAC1C;IAEA,OAAO;MAAED,MAAM,EAAE2D,KAAK;MAAE1D;IAAY,CAAC;EACvC,CAAC,CAAC;AACJ;AAEA,SAASqD,aAAaA,CAACP,QAAQ,EAAEG,YAAY,EAAE;EAC7C,MAAMa,OAAO,GAAGhB,QAAQ,GAAG,EAAE;EAC7B,MAAMiB,OAAO,GAAGd,YAAY,GAAG,GAAG;EAClC,MAAMe,MAAM,GAAGf,YAAY,GAAG,EAAE,IAAIH,QAAQ,GAAGG,YAAY,GAAG,GAAG;EACjE,OAAOa,OAAO,IAAIC,OAAO,IAAIC,MAAM,GAAG,oBAAoB,GAAG,UAAU;AACzE;AAEA,SAASV,WAAWA,CAACvD,MAAM,EAAE;EAC3B,MAAMkE,GAAG,GAAGlE,MAAM,CAACmE,SAAS,CAAC,CAAC;EAC9B,IAAIC,EAAE,GAAG,CAAC;IAAEC,EAAE,GAAG,CAAC;IAAErB,GAAG,GAAG,CAAC;EAE3B,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAMC,GAAG,GAAGN,GAAG,CAACI,CAAC,CAAC,CAACC,CAAC,CAAC;MACrBvB,GAAG,IAAIwB,GAAG;MACVJ,EAAE,IAAIG,CAAC,GAAGC,GAAG;MACbH,EAAE,IAAIC,CAAC,GAAGE,GAAG;IACf;EACF;EAEA,IAAIxB,GAAG,KAAK,CAAC,EAAE,OAAOhD,MAAM;EAE5BoE,EAAE,IAAIpB,GAAG;EACTqB,EAAE,IAAIrB,GAAG;EAET,MAAMyB,MAAM,GAAGhE,IAAI,CAACiE,KAAK,CAAC,EAAE,GAAGN,EAAE,CAAC;EAClC,MAAMO,MAAM,GAAGlE,IAAI,CAACiE,KAAK,CAAC,EAAE,GAAGL,EAAE,CAAC;EAElC,MAAMO,MAAM,GAAG5F,EAAE,CAAC6F,GAAG,CAAC7E,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAClD,MAAM8E,KAAK,GAAG,CAAC,CAAC,GAAGH,MAAM,EAAE,CAAC,GAAGF,MAAM,CAAC,CAACM,GAAG,CAACC,CAAC,IAAIvE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACwE,GAAG,CAAC,CAAC,EAAED,CAAC,CAAC,CAAC,CAAC;EAC5E,OAAOhG,EAAE,CAACkG,KAAK,CAACN,MAAM,EAAEE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAC1C;AAEA,SAAStB,cAAcA,CAACxD,MAAM,EAAE;EAC9B,MAAMmF,MAAM,GAAGnG,EAAE,CAACoG,QAAQ,CAAC,CACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACtB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,EAAE,CAAC;EAExB,OAAOrG,EAAE,CAACsG,MAAM,CAACtF,MAAM,CAAC4D,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAEuB,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC,CAACvB,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AACvF;AAEA,SAASH,MAAMA,CAACzD,MAAM,EAAE;EACtB,OAAOhB,EAAE,CAACuG,OAAO,CAACvF,MAAM,CAAC4D,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAC7F;AAEA,SAASF,QAAQA,CAAC1D,MAAM,EAAEwF,SAAS,GAAG,IAAI,EAAE;EAC1C,OAAOxF,MAAM,CAACmD,OAAO,CAACnE,EAAE,CAACoE,MAAM,CAACoC,SAAS,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;AACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}