{"ast":null,"code":"export default class TherapySessionAgent {\n  constructor(patientName = \"Anonymous\", mcp = null) {\n    this.patientName = patientName;\n    this.digits = [...Array(10).keys()];\n    this.currentIndex = 0;\n    this.startTime = new Date().toISOString();\n    this.sessionId = `session_${Date.now()}`;\n    this.mcp = mcp;\n  }\n  getCurrentDigit() {\n    return this.digits[this.currentIndex];\n  }\n  getStrokes() {\n    var _this$mcp, _this$mcp$sessionData;\n    const mcpEntry = (_this$mcp = this.mcp) === null || _this$mcp === void 0 ? void 0 : (_this$mcp$sessionData = _this$mcp.sessionData) === null || _this$mcp$sessionData === void 0 ? void 0 : _this$mcp$sessionData[this.currentIndex];\n    return (mcpEntry === null || mcpEntry === void 0 ? void 0 : mcpEntry.strokes) || [];\n  }\n  goToNextDigit() {\n    if (this.currentIndex < this.digits.length - 1) {\n      this.currentIndex++;\n    }\n  }\n  isSessionFinished() {\n    return this.currentIndex >= this.digits.length - 1;\n  }\n\n  // ✅ Let MCP handle the full drawing logic\n  async processDrawing(dataURL, targetDigit = null) {\n    const digit = targetDigit !== null && targetDigit !== void 0 ? targetDigit : this.getCurrentDigit();\n    console.log(\"➡️ [SessionAgent] Forwarding to MCP.processDrawing with:\", digit);\n    return await this.mcp.processDrawing(dataURL, digit);\n  }\n\n  // ✅ Return sessionData directly from MCP\n  async endSession() {\n    const {\n      drawings,\n      metrics,\n      fatigueInfo\n    } = await this.mcp.endSession({\n      autoDownloadLog: true,\n      generatePDF: false,\n      generateJSON: false\n    });\n    return {\n      attempts: drawings,\n      metrics,\n      fatigueInfo,\n      patientName: this.patientName,\n      sessionId: this.sessionId\n    };\n  }\n}","map":{"version":3,"names":["TherapySessionAgent","constructor","patientName","mcp","digits","Array","keys","currentIndex","startTime","Date","toISOString","sessionId","now","getCurrentDigit","getStrokes","_this$mcp","_this$mcp$sessionData","mcpEntry","sessionData","strokes","goToNextDigit","length","isSessionFinished","processDrawing","dataURL","targetDigit","digit","console","log","endSession","drawings","metrics","fatigueInfo","autoDownloadLog","generatePDF","generateJSON","attempts"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/tracking_agent/TherapySessionAgent.js"],"sourcesContent":["export default class TherapySessionAgent {\r\n  constructor(patientName = \"Anonymous\", mcp = null) {\r\n    this.patientName = patientName;\r\n    this.digits = [...Array(10).keys()];\r\n    this.currentIndex = 0;\r\n    this.startTime = new Date().toISOString();\r\n    this.sessionId = `session_${Date.now()}`;\r\n    this.mcp = mcp;\r\n  }\r\n\r\n  getCurrentDigit() {\r\n    return this.digits[this.currentIndex];\r\n  }\r\n\r\n  getStrokes() {\r\n    const mcpEntry = this.mcp?.sessionData?.[this.currentIndex];\r\n    return mcpEntry?.strokes || [];\r\n  }\r\n\r\n  goToNextDigit() {\r\n    if (this.currentIndex < this.digits.length - 1) {\r\n      this.currentIndex++;\r\n    }\r\n  }\r\n\r\n  isSessionFinished() {\r\n    return this.currentIndex >= this.digits.length - 1;\r\n  }\r\n\r\n  // ✅ Let MCP handle the full drawing logic\r\nasync processDrawing(dataURL, targetDigit = null) {\r\n  const digit = targetDigit ?? this.getCurrentDigit();\r\n  console.log(\"➡️ [SessionAgent] Forwarding to MCP.processDrawing with:\", digit);\r\n  return await this.mcp.processDrawing(dataURL, digit);\r\n}\r\n\r\n\r\n\r\n  // ✅ Return sessionData directly from MCP\r\n  async endSession() {\r\n    const {\r\n      drawings,\r\n      metrics,\r\n      fatigueInfo\r\n    } = await this.mcp.endSession({\r\n      autoDownloadLog: true,\r\n      generatePDF: false,\r\n      generateJSON: false,\r\n    });\r\n\r\n    return {\r\n      attempts: drawings,\r\n      metrics,\r\n      fatigueInfo,\r\n      patientName: this.patientName,\r\n      sessionId: this.sessionId,\r\n    };\r\n  }\r\n\r\n}\r\n"],"mappings":"AAAA,eAAe,MAAMA,mBAAmB,CAAC;EACvCC,WAAWA,CAACC,WAAW,GAAG,WAAW,EAAEC,GAAG,GAAG,IAAI,EAAE;IACjD,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACE,MAAM,GAAG,CAAC,GAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IACnC,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACzC,IAAI,CAACC,SAAS,GAAG,WAAWF,IAAI,CAACG,GAAG,CAAC,CAAC,EAAE;IACxC,IAAI,CAACT,GAAG,GAAGA,GAAG;EAChB;EAEAU,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACT,MAAM,CAAC,IAAI,CAACG,YAAY,CAAC;EACvC;EAEAO,UAAUA,CAAA,EAAG;IAAA,IAAAC,SAAA,EAAAC,qBAAA;IACX,MAAMC,QAAQ,IAAAF,SAAA,GAAG,IAAI,CAACZ,GAAG,cAAAY,SAAA,wBAAAC,qBAAA,GAARD,SAAA,CAAUG,WAAW,cAAAF,qBAAA,uBAArBA,qBAAA,CAAwB,IAAI,CAACT,YAAY,CAAC;IAC3D,OAAO,CAAAU,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,OAAO,KAAI,EAAE;EAChC;EAEAC,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAACb,YAAY,GAAG,IAAI,CAACH,MAAM,CAACiB,MAAM,GAAG,CAAC,EAAE;MAC9C,IAAI,CAACd,YAAY,EAAE;IACrB;EACF;EAEAe,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACf,YAAY,IAAI,IAAI,CAACH,MAAM,CAACiB,MAAM,GAAG,CAAC;EACpD;;EAEA;EACF,MAAME,cAAcA,CAACC,OAAO,EAAEC,WAAW,GAAG,IAAI,EAAE;IAChD,MAAMC,KAAK,GAAGD,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAI,IAAI,CAACZ,eAAe,CAAC,CAAC;IACnDc,OAAO,CAACC,GAAG,CAAC,0DAA0D,EAAEF,KAAK,CAAC;IAC9E,OAAO,MAAM,IAAI,CAACvB,GAAG,CAACoB,cAAc,CAACC,OAAO,EAAEE,KAAK,CAAC;EACtD;;EAIE;EACA,MAAMG,UAAUA,CAAA,EAAG;IACjB,MAAM;MACJC,QAAQ;MACRC,OAAO;MACPC;IACF,CAAC,GAAG,MAAM,IAAI,CAAC7B,GAAG,CAAC0B,UAAU,CAAC;MAC5BI,eAAe,EAAE,IAAI;MACrBC,WAAW,EAAE,KAAK;MAClBC,YAAY,EAAE;IAChB,CAAC,CAAC;IAEF,OAAO;MACLC,QAAQ,EAAEN,QAAQ;MAClBC,OAAO;MACPC,WAAW;MACX9B,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BS,SAAS,EAAE,IAAI,CAACA;IAClB,CAAC;EACH;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}