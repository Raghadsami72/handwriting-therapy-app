{"ast":null,"code":"// agents/cnnAgent.js\nimport * as tf from '@tensorflow/tfjs';\nlet model = null;\nlet currentLanguage = null;\nexport async function loadModel(lang = \"en\") {\n  if (model && currentLanguage === lang) return model;\n  const path = lang === \"ar\" ? \"/models/arabic_model/model.json\" : \"/models/Final_PreluModel/model.json\";\n  try {\n    model = await tf.loadLayersModel(path);\n    currentLanguage = lang;\n    console.log(`‚úÖ ${lang.toUpperCase()} model loaded.`);\n  } catch (error) {\n    console.error(`‚ùå Failed to load ${lang} model:`, error);\n    throw error;\n  }\n  return model;\n}\nexport async function predictDigit(dataURL, lang = \"en\") {\n  await loadModel(lang);\n  const imageTensor = await preprocessDrawing(dataURL);\n  const prediction = model.predict(imageTensor);\n  const predictionArray = await prediction.array();\n  const predictedDigit = predictionArray[0].indexOf(Math.max(...predictionArray[0]));\n  return predictedDigit;\n}\nasync function preprocessDrawing(dataURL, invert = true) {\n  const image = new Image();\n  image.src = dataURL;\n  await new Promise(res => image.onload = res);\n  return tf.tidy(() => {\n    let tensor = tf.browser.fromPixels(image, 1).resizeNearestNeighbor([28, 28]).toFloat();\n    if (invert) {\n      tensor = tf.sub(255, tensor);\n    }\n    const normalized = tensor.div(255.0);\n    const expanded = normalized.expandDims(0);\n    console.log(\"üìê Preprocessed Tensor Shape:\", expanded.shape);\n    expanded.print();\n    return expanded;\n  });\n}","map":{"version":3,"names":["tf","model","currentLanguage","loadModel","lang","path","loadLayersModel","console","log","toUpperCase","error","predictDigit","dataURL","imageTensor","preprocessDrawing","prediction","predict","predictionArray","array","predictedDigit","indexOf","Math","max","invert","image","Image","src","Promise","res","onload","tidy","tensor","browser","fromPixels","resizeNearestNeighbor","toFloat","sub","normalized","div","expanded","expandDims","shape","print"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/cnnAgent.js"],"sourcesContent":["// agents/cnnAgent.js\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\nlet model = null;\r\nlet currentLanguage = null;\r\n\r\nexport async function loadModel(lang = \"en\") {\r\n  if (model && currentLanguage === lang) return model;\r\n\r\n  const path = lang === \"ar\"\r\n    ? \"/models/arabic_model/model.json\"\r\n    : \"/models/Final_PreluModel/model.json\";\r\n\r\n  try {\r\n    model = await tf.loadLayersModel(path);\r\n    currentLanguage = lang;\r\n    console.log(`‚úÖ ${lang.toUpperCase()} model loaded.`);\r\n  } catch (error) {\r\n    console.error(`‚ùå Failed to load ${lang} model:`, error);\r\n    throw error;\r\n  }\r\n\r\n  return model;\r\n}\r\n\r\nexport async function predictDigit(dataURL, lang = \"en\") {\r\n  await loadModel(lang);\r\n\r\n  const imageTensor = await preprocessDrawing(dataURL);\r\n  const prediction = model.predict(imageTensor);\r\n  const predictionArray = await prediction.array();\r\n  const predictedDigit = predictionArray[0].indexOf(Math.max(...predictionArray[0]));\r\n\r\n  return predictedDigit;\r\n}\r\n\r\nasync function preprocessDrawing(dataURL, invert = true) {\r\n  const image = new Image();\r\n  image.src = dataURL;\r\n  await new Promise((res) => (image.onload = res));\r\n\r\n  return tf.tidy(() => {\r\n    let tensor = tf.browser.fromPixels(image, 1)\r\n      .resizeNearestNeighbor([28, 28])\r\n      .toFloat();\r\n\r\n    if (invert) {\r\n      tensor = tf.sub(255, tensor);\r\n    }\r\n\r\n    const normalized = tensor.div(255.0);\r\n    const expanded = normalized.expandDims(0);\r\n\r\n    console.log(\"üìê Preprocessed Tensor Shape:\", expanded.shape);\r\n    expanded.print();\r\n\r\n    return expanded;\r\n  });\r\n}\r\n\r\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,EAAE,MAAM,kBAAkB;AAEtC,IAAIC,KAAK,GAAG,IAAI;AAChB,IAAIC,eAAe,GAAG,IAAI;AAE1B,OAAO,eAAeC,SAASA,CAACC,IAAI,GAAG,IAAI,EAAE;EAC3C,IAAIH,KAAK,IAAIC,eAAe,KAAKE,IAAI,EAAE,OAAOH,KAAK;EAEnD,MAAMI,IAAI,GAAGD,IAAI,KAAK,IAAI,GACtB,iCAAiC,GACjC,qCAAqC;EAEzC,IAAI;IACFH,KAAK,GAAG,MAAMD,EAAE,CAACM,eAAe,CAACD,IAAI,CAAC;IACtCH,eAAe,GAAGE,IAAI;IACtBG,OAAO,CAACC,GAAG,CAAC,KAAKJ,IAAI,CAACK,WAAW,CAAC,CAAC,gBAAgB,CAAC;EACtD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,oBAAoBN,IAAI,SAAS,EAAEM,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;EAEA,OAAOT,KAAK;AACd;AAEA,OAAO,eAAeU,YAAYA,CAACC,OAAO,EAAER,IAAI,GAAG,IAAI,EAAE;EACvD,MAAMD,SAAS,CAACC,IAAI,CAAC;EAErB,MAAMS,WAAW,GAAG,MAAMC,iBAAiB,CAACF,OAAO,CAAC;EACpD,MAAMG,UAAU,GAAGd,KAAK,CAACe,OAAO,CAACH,WAAW,CAAC;EAC7C,MAAMI,eAAe,GAAG,MAAMF,UAAU,CAACG,KAAK,CAAC,CAAC;EAChD,MAAMC,cAAc,GAAGF,eAAe,CAAC,CAAC,CAAC,CAACG,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGL,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;EAElF,OAAOE,cAAc;AACvB;AAEA,eAAeL,iBAAiBA,CAACF,OAAO,EAAEW,MAAM,GAAG,IAAI,EAAE;EACvD,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;EACzBD,KAAK,CAACE,GAAG,GAAGd,OAAO;EACnB,MAAM,IAAIe,OAAO,CAAEC,GAAG,IAAMJ,KAAK,CAACK,MAAM,GAAGD,GAAI,CAAC;EAEhD,OAAO5B,EAAE,CAAC8B,IAAI,CAAC,MAAM;IACnB,IAAIC,MAAM,GAAG/B,EAAE,CAACgC,OAAO,CAACC,UAAU,CAACT,KAAK,EAAE,CAAC,CAAC,CACzCU,qBAAqB,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAC/BC,OAAO,CAAC,CAAC;IAEZ,IAAIZ,MAAM,EAAE;MACVQ,MAAM,GAAG/B,EAAE,CAACoC,GAAG,CAAC,GAAG,EAAEL,MAAM,CAAC;IAC9B;IAEA,MAAMM,UAAU,GAAGN,MAAM,CAACO,GAAG,CAAC,KAAK,CAAC;IACpC,MAAMC,QAAQ,GAAGF,UAAU,CAACG,UAAU,CAAC,CAAC,CAAC;IAEzCjC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE+B,QAAQ,CAACE,KAAK,CAAC;IAC5DF,QAAQ,CAACG,KAAK,CAAC,CAAC;IAEhB,OAAOH,QAAQ;EACjB,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}