{"ast":null,"code":"export default class TherapySessionAgent {\n  constructor(patientName = \"Anonymous\", mcp = null) {\n    this.patientName = patientName;\n    this.digits = [...Array(10).keys()];\n    this.currentIndex = 0;\n    this.attempts = [];\n    this.startTime = new Date().toISOString();\n    this.sessionId = `session_${Date.now()}`;\n    this.mcp = mcp; // ðŸ”¥ IMPORTANT: Store the MCP reference\n  }\n  getCurrentDigit() {\n    return this.digits[this.currentIndex];\n  }\n  registerAttempt(predicted, correct, feedbackText, strokes) {\n    this.attempts.push({\n      target: this.getCurrentDigit(),\n      predicted,\n      correct,\n      feedbackText,\n      strokes,\n      time: new Date().toISOString()\n    });\n  }\n  //getter for strokes\n  getStrokes() {\n    var _this$attempts$this$c;\n    return ((_this$attempts$this$c = this.attempts[this.currentIndex]) === null || _this$attempts$this$c === void 0 ? void 0 : _this$attempts$this$c.strokes) || [];\n  }\n  goToNextDigit() {\n    if (this.currentIndex < this.digits.length - 1) {\n      this.currentIndex++;\n    }\n  }\n  isSessionFinished() {\n    return this.currentIndex >= this.digits.length - 1;\n  }\n  getSessionSummary() {\n    var _this$mcp, _this$mcp$getMetrics, _this$mcp2, _this$mcp2$getFatigue;\n    return {\n      attempts: this.attempts,\n      metrics: ((_this$mcp = this.mcp) === null || _this$mcp === void 0 ? void 0 : (_this$mcp$getMetrics = _this$mcp.getMetrics) === null || _this$mcp$getMetrics === void 0 ? void 0 : _this$mcp$getMetrics.call(_this$mcp)) || {},\n      fatigueInfo: ((_this$mcp2 = this.mcp) === null || _this$mcp2 === void 0 ? void 0 : (_this$mcp2$getFatigue = _this$mcp2.getFatigueInfo) === null || _this$mcp2$getFatigue === void 0 ? void 0 : _this$mcp2$getFatigue.call(_this$mcp2)) || {},\n      patientName: this.patientName,\n      sessionId: this.sessionId\n    };\n  }\n}","map":{"version":3,"names":["TherapySessionAgent","constructor","patientName","mcp","digits","Array","keys","currentIndex","attempts","startTime","Date","toISOString","sessionId","now","getCurrentDigit","registerAttempt","predicted","correct","feedbackText","strokes","push","target","time","getStrokes","_this$attempts$this$c","goToNextDigit","length","isSessionFinished","getSessionSummary","_this$mcp","_this$mcp$getMetrics","_this$mcp2","_this$mcp2$getFatigue","metrics","getMetrics","call","fatigueInfo","getFatigueInfo"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/tracking_agent/TherapySessionAgent.js"],"sourcesContent":["  export default class TherapySessionAgent {\r\n    constructor(patientName = \"Anonymous\", mcp = null) {\r\n      this.patientName = patientName;\r\n      this.digits = [...Array(10).keys()];\r\n      this.currentIndex = 0;\r\n      this.attempts = [];\r\n      this.startTime = new Date().toISOString();\r\n      this.sessionId = `session_${Date.now()}`;\r\n      this.mcp = mcp; // ðŸ”¥ IMPORTANT: Store the MCP reference\r\n    }\r\n  \r\n    getCurrentDigit() {\r\n      return this.digits[this.currentIndex];\r\n    }\r\n  \r\n    registerAttempt(predicted, correct, feedbackText,strokes) {\r\n      this.attempts.push({\r\n        target: this.getCurrentDigit(),\r\n        predicted,\r\n        correct,\r\n        feedbackText,\r\n        strokes,\r\n        time: new Date().toISOString(),\r\n      });\r\n    }\r\n    //getter for strokes\r\n    getStrokes() {\r\n  return this.attempts[this.currentIndex]?.strokes || [];\r\n}\r\n\r\n  \r\n    goToNextDigit() {\r\n      if (this.currentIndex < this.digits.length - 1) {\r\n        this.currentIndex++;\r\n      }\r\n    }\r\n  \r\n    isSessionFinished() {\r\n      return this.currentIndex >= this.digits.length - 1;\r\n    }\r\n  \r\n    getSessionSummary() {\r\n      return {\r\n        attempts: this.attempts,\r\n        metrics: this.mcp?.getMetrics?.() || {},\r\n        fatigueInfo: this.mcp?.getFatigueInfo?.() || {},\r\n        patientName: this.patientName,\r\n        sessionId: this.sessionId,\r\n      };\r\n    }\r\n  }\r\n  "],"mappings":"AAAE,eAAe,MAAMA,mBAAmB,CAAC;EACvCC,WAAWA,CAACC,WAAW,GAAG,WAAW,EAAEC,GAAG,GAAG,IAAI,EAAE;IACjD,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACE,MAAM,GAAG,CAAC,GAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IACnC,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACzC,IAAI,CAACC,SAAS,GAAG,WAAWF,IAAI,CAACG,GAAG,CAAC,CAAC,EAAE;IACxC,IAAI,CAACV,GAAG,GAAGA,GAAG,CAAC,CAAC;EAClB;EAEAW,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACV,MAAM,CAAC,IAAI,CAACG,YAAY,CAAC;EACvC;EAEAQ,eAAeA,CAACC,SAAS,EAAEC,OAAO,EAAEC,YAAY,EAACC,OAAO,EAAE;IACxD,IAAI,CAACX,QAAQ,CAACY,IAAI,CAAC;MACjBC,MAAM,EAAE,IAAI,CAACP,eAAe,CAAC,CAAC;MAC9BE,SAAS;MACTC,OAAO;MACPC,YAAY;MACZC,OAAO;MACPG,IAAI,EAAE,IAAIZ,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IAC/B,CAAC,CAAC;EACJ;EACA;EACAY,UAAUA,CAAA,EAAG;IAAA,IAAAC,qBAAA;IACf,OAAO,EAAAA,qBAAA,OAAI,CAAChB,QAAQ,CAAC,IAAI,CAACD,YAAY,CAAC,cAAAiB,qBAAA,uBAAhCA,qBAAA,CAAkCL,OAAO,KAAI,EAAE;EACxD;EAGIM,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAAClB,YAAY,GAAG,IAAI,CAACH,MAAM,CAACsB,MAAM,GAAG,CAAC,EAAE;MAC9C,IAAI,CAACnB,YAAY,EAAE;IACrB;EACF;EAEAoB,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACpB,YAAY,IAAI,IAAI,CAACH,MAAM,CAACsB,MAAM,GAAG,CAAC;EACpD;EAEAE,iBAAiBA,CAAA,EAAG;IAAA,IAAAC,SAAA,EAAAC,oBAAA,EAAAC,UAAA,EAAAC,qBAAA;IAClB,OAAO;MACLxB,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvByB,OAAO,EAAE,EAAAJ,SAAA,OAAI,CAAC1B,GAAG,cAAA0B,SAAA,wBAAAC,oBAAA,GAARD,SAAA,CAAUK,UAAU,cAAAJ,oBAAA,uBAApBA,oBAAA,CAAAK,IAAA,CAAAN,SAAuB,CAAC,KAAI,CAAC,CAAC;MACvCO,WAAW,EAAE,EAAAL,UAAA,OAAI,CAAC5B,GAAG,cAAA4B,UAAA,wBAAAC,qBAAA,GAARD,UAAA,CAAUM,cAAc,cAAAL,qBAAA,uBAAxBA,qBAAA,CAAAG,IAAA,CAAAJ,UAA2B,CAAC,KAAI,CAAC,CAAC;MAC/C7B,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BU,SAAS,EAAE,IAAI,CAACA;IAClB,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}