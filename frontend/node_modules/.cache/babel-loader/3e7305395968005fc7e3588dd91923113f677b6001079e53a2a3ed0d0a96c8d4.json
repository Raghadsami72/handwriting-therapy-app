{"ast":null,"code":"// agents/tracking_agent/report_generator.js\nimport { jsPDF } from \"jspdf\";\n\n// ✅ PDF report generator\nexport async function generatePDFReport(metrics, fatigueInfo, options = {\n  autoSave: false,\n  patientName: \"Anonymous\",\n  sessionId: null\n}) {\n  try {\n    const doc = new jsPDF();\n    doc.setFontSize(22);\n    doc.setFont(\"Helvetica\", \"bold\");\n    doc.text(\"Handwriting Therapy Session Report\", doc.internal.pageSize.getWidth() / 2, 30, {\n      align: \"center\"\n    });\n    doc.setFont(\"Helvetica\", \"normal\");\n    doc.setFontSize(12);\n    doc.text(`Patient: ${options.patientName}`, 20, 40);\n    if (options.sessionId) {\n      doc.text(`Session ID: ${options.sessionId}`, 140, 40);\n    }\n    doc.setLineWidth(0.5);\n    doc.line(20, 45, 190, 45);\n    doc.setFontSize(16);\n    doc.text(\"Session Metrics:\", 20, 60);\n    doc.setFontSize(12);\n    doc.text(`- Average Writing Speed: ${metrics.avgSpeed.toFixed(2)} pixels/sec`, 25, 75);\n    doc.text(`- Average Pressure: ${metrics.avgPressure.toFixed(2)}`, 25, 85);\n    doc.text(`- Total Strokes Captured: ${metrics.totalStrokes}`, 25, 95);\n    doc.text(`- Stroke Stability (Speed Variance): ${metrics.speedVariance.toFixed(2)}`, 25, 105);\n    doc.line(20, 115, 190, 115);\n    doc.setFontSize(16);\n    doc.text(\"Fatigue Analysis:\", 20, 130);\n    doc.setFontSize(12);\n    doc.text(`- Fatigue Detected: ${fatigueInfo.detected ? \"Yes\" : \"No\"}`, 25, 145);\n    doc.text(`- Reason: ${fatigueInfo.reason}`, 25, 155);\n    doc.setFontSize(10);\n    const timestamp = new Date();\n    doc.text(`Generated on: ${timestamp.toLocaleString()}`, 20, 280);\n    const blob = doc.output(\"blob\");\n    if (options.autoSave) {\n      doc.save(`therapy_session_report_${timestamp.toISOString().replace(/[:.-]/g, \"_\")}.pdf`);\n    }\n    return blob;\n  } catch (error) {\n    console.error(\"Error generating PDF report:\", error);\n    throw error;\n  }\n}\n\n// ✅ JSON report generator (only keep this one!)\nexport async function generateJSONReport(metrics, fatigueInfo) {\n  try {\n    const sessionSummary = {\n      generatedAt: new Date().toISOString(),\n      metrics,\n      fatigueInfo\n    };\n    const dataStr = JSON.stringify(sessionSummary, null, 2);\n    return new Blob([dataStr], {\n      type: \"application/json\"\n    });\n  } catch (error) {\n    console.error(\"Error generating JSON report:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["jsPDF","generatePDFReport","metrics","fatigueInfo","options","autoSave","patientName","sessionId","doc","setFontSize","setFont","text","internal","pageSize","getWidth","align","setLineWidth","line","avgSpeed","toFixed","avgPressure","totalStrokes","speedVariance","detected","reason","timestamp","Date","toLocaleString","blob","output","save","toISOString","replace","error","console","generateJSONReport","sessionSummary","generatedAt","dataStr","JSON","stringify","Blob","type"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/tracking_agent/report_generator.js"],"sourcesContent":["// agents/tracking_agent/report_generator.js\r\nimport { jsPDF } from \"jspdf\";\r\n\r\n// ✅ PDF report generator\r\nexport async function generatePDFReport(metrics, fatigueInfo, options = { autoSave: false, patientName: \"Anonymous\", sessionId: null }) {\r\n  try {\r\n    const doc = new jsPDF();\r\n\r\n    doc.setFontSize(22);\r\n    doc.setFont(\"Helvetica\", \"bold\");\r\n    doc.text(\"Handwriting Therapy Session Report\", doc.internal.pageSize.getWidth() / 2, 30, { align: \"center\" });\r\n    doc.setFont(\"Helvetica\", \"normal\");\r\n\r\n    doc.setFontSize(12);\r\n    doc.text(`Patient: ${options.patientName}`, 20, 40);\r\n    if (options.sessionId) {\r\n      doc.text(`Session ID: ${options.sessionId}`, 140, 40);\r\n    }\r\n\r\n    doc.setLineWidth(0.5);\r\n    doc.line(20, 45, 190, 45);\r\n\r\n    doc.setFontSize(16);\r\n    doc.text(\"Session Metrics:\", 20, 60);\r\n\r\n    doc.setFontSize(12);\r\n    doc.text(`- Average Writing Speed: ${metrics.avgSpeed.toFixed(2)} pixels/sec`, 25, 75);\r\n    doc.text(`- Average Pressure: ${metrics.avgPressure.toFixed(2)}`, 25, 85);\r\n    doc.text(`- Total Strokes Captured: ${metrics.totalStrokes}`, 25, 95);\r\n    doc.text(`- Stroke Stability (Speed Variance): ${metrics.speedVariance.toFixed(2)}`, 25, 105);\r\n\r\n    doc.line(20, 115, 190, 115);\r\n\r\n    doc.setFontSize(16);\r\n    doc.text(\"Fatigue Analysis:\", 20, 130);\r\n\r\n    doc.setFontSize(12);\r\n    doc.text(`- Fatigue Detected: ${fatigueInfo.detected ? \"Yes\" : \"No\"}`, 25, 145);\r\n    doc.text(`- Reason: ${fatigueInfo.reason}`, 25, 155);\r\n\r\n    doc.setFontSize(10);\r\n    const timestamp = new Date();\r\n    doc.text(`Generated on: ${timestamp.toLocaleString()}`, 20, 280);\r\n\r\n    const blob = doc.output(\"blob\");\r\n\r\n    if (options.autoSave) {\r\n      doc.save(`therapy_session_report_${timestamp.toISOString().replace(/[:.-]/g, \"_\")}.pdf`);\r\n    }\r\n\r\n    return blob;\r\n  } catch (error) {\r\n    console.error(\"Error generating PDF report:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ✅ JSON report generator (only keep this one!)\r\nexport async function generateJSONReport(metrics, fatigueInfo) {\r\n  try {\r\n    const sessionSummary = {\r\n      generatedAt: new Date().toISOString(),\r\n      metrics,\r\n      fatigueInfo,\r\n    };\r\n\r\n    const dataStr = JSON.stringify(sessionSummary, null, 2);\r\n    return new Blob([dataStr], { type: \"application/json\" });\r\n  } catch (error) {\r\n    console.error(\"Error generating JSON report:\", error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}