{"ast":null,"code":"// frontend/src/agents/tracking_agent/index.js\n\nlet canvasElement = null;\nlet ctx = null;\nlet strokes = [];\nlet currentStroke = [];\nlet isDrawing = false;\nlet sessionMeta = {\n  patientName: \"Anonymous\",\n  sessionId: \"\"\n};\nfunction startListening() {\n  if (!canvasElement) {\n    console.warn(\"⚠️ No canvasElement set before startListening.\");\n    return;\n  }\n  canvasElement.addEventListener(\"mousedown\", e => {\n    isDrawing = true;\n    currentStroke = [[e.offsetX, e.offsetY]];\n  });\n  canvasElement.addEventListener(\"mousemove\", e => {\n    if (isDrawing) {\n      currentStroke.push([e.offsetX, e.offsetY]);\n      ctx.lineTo(e.offsetX, e.offsetY);\n      ctx.stroke();\n    }\n  });\n  canvasElement.addEventListener(\"mouseup\", () => {\n    if (isDrawing && currentStroke.length > 0) {\n      strokes.push(currentStroke);\n    }\n    isDrawing = false;\n  });\n}\nfunction waitForCanvasAndInit() {\n  const check = setInterval(() => {\n    const found = document.querySelector(\"canvas\");\n    if (found) {\n      clearInterval(check);\n      canvasElement = found;\n      ctx = canvasElement.getContext(\"2d\");\n      ctx.strokeStyle = \"#000\";\n      ctx.lineWidth = 2;\n      console.log(\"✅ Tracking canvas detected.\");\n      startListening();\n    }\n  }, 300);\n}\nexport function startTracking({\n  patientName = \"Anonymous\",\n  sessionId = \"\"\n}) {\n  sessionMeta = {\n    patientName,\n    sessionId\n  };\n  strokes = [];\n  waitForCanvasAndInit();\n  console.log(\"🧠 Tracking started for\", patientName);\n}\nexport async function endTracking({\n  generateJSON = true,\n  autoDownloadLog = true\n}) {\n  const result = {\n    patientName: sessionMeta.patientName,\n    sessionId: sessionMeta.sessionId,\n    timestamp: new Date().toISOString(),\n    strokeCount: strokes.length,\n    strokes\n  };\n  console.log(\"📈 Session Stroke Data:\", result);\n  if (generateJSON && autoDownloadLog) {\n    const blob = new Blob([JSON.stringify(result, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `${sessionMeta.patientName}_tracking_log.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n  return result;\n}","map":{"version":3,"names":["canvasElement","ctx","strokes","currentStroke","isDrawing","sessionMeta","patientName","sessionId","startListening","console","warn","addEventListener","e","offsetX","offsetY","push","lineTo","stroke","length","waitForCanvasAndInit","check","setInterval","found","document","querySelector","clearInterval","getContext","strokeStyle","lineWidth","log","startTracking","endTracking","generateJSON","autoDownloadLog","result","timestamp","Date","toISOString","strokeCount","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","a","createElement","href","download","click","revokeObjectURL"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/tracking_agent/index.js"],"sourcesContent":["// frontend/src/agents/tracking_agent/index.js\r\n\r\nlet canvasElement = null;\r\nlet ctx = null;\r\nlet strokes = [];\r\nlet currentStroke = [];\r\nlet isDrawing = false;\r\nlet sessionMeta = { patientName: \"Anonymous\", sessionId: \"\" };\r\n\r\nfunction startListening() {\r\n  if (!canvasElement) {\r\n    console.warn(\"⚠️ No canvasElement set before startListening.\");\r\n    return;\r\n  }\r\n\r\n  canvasElement.addEventListener(\"mousedown\", (e) => {\r\n    isDrawing = true;\r\n    currentStroke = [[e.offsetX, e.offsetY]];\r\n  });\r\n\r\n  canvasElement.addEventListener(\"mousemove\", (e) => {\r\n    if (isDrawing) {\r\n      currentStroke.push([e.offsetX, e.offsetY]);\r\n      ctx.lineTo(e.offsetX, e.offsetY);\r\n      ctx.stroke();\r\n    }\r\n  });\r\n\r\n  canvasElement.addEventListener(\"mouseup\", () => {\r\n    if (isDrawing && currentStroke.length > 0) {\r\n      strokes.push(currentStroke);\r\n    }\r\n    isDrawing = false;\r\n  });\r\n}\r\n\r\nfunction waitForCanvasAndInit() {\r\n  const check = setInterval(() => {\r\n    const found = document.querySelector(\"canvas\");\r\n    if (found) {\r\n      clearInterval(check);\r\n      canvasElement = found;\r\n      ctx = canvasElement.getContext(\"2d\");\r\n      ctx.strokeStyle = \"#000\";\r\n      ctx.lineWidth = 2;\r\n      console.log(\"✅ Tracking canvas detected.\");\r\n      startListening();\r\n    }\r\n  }, 300);\r\n}\r\n\r\nexport function startTracking({ patientName = \"Anonymous\", sessionId = \"\" }) {\r\n  sessionMeta = { patientName, sessionId };\r\n  strokes = [];\r\n  waitForCanvasAndInit();\r\n  console.log(\"🧠 Tracking started for\", patientName);\r\n}\r\n\r\nexport async function endTracking({\r\n  generateJSON = true,\r\n  autoDownloadLog = true,\r\n}) {\r\n  const result = {\r\n    patientName: sessionMeta.patientName,\r\n    sessionId: sessionMeta.sessionId,\r\n    timestamp: new Date().toISOString(),\r\n    strokeCount: strokes.length,\r\n    strokes,\r\n  };\r\n\r\n  console.log(\"📈 Session Stroke Data:\", result);\r\n\r\n  if (generateJSON && autoDownloadLog) {\r\n    const blob = new Blob([JSON.stringify(result, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = `${sessionMeta.patientName}_tracking_log.json`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  return result;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}