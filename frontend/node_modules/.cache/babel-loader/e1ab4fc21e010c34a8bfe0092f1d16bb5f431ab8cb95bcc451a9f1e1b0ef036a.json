{"ast":null,"code":"/**\r\n * Logs the handwriting therapy session data by saving strokes, session metrics, and fatigue analysis\r\n * into a downloadable JSON file. Also returns a blob and URL for additional uses (e.g., server upload).\r\n */\n\nconst attemptLog = [];\nexport function logAttempt(metricsObj) {\n  attemptLog.push(metricsObj);\n}\nexport function getAllAttempts() {\n  return attemptLog;\n}\nexport function logSession(rawStrokeData, metrics, fatigueInfo, options = {\n  autoDownload: true,\n  filename: null\n}) {\n  try {\n    const timestamp = new Date();\n    const sessionId = `session_${timestamp.toISOString().replace(/[:.-]/g, \"_\")}`;\n    const sessionSummary = {\n      sessionId,\n      generatedAt: timestamp.toISOString(),\n      metrics,\n      fatigueInfo,\n      strokes: rawStrokeData\n    };\n    const dataStr = JSON.stringify(sessionSummary, null, 2);\n    const blob = new Blob([dataStr], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    if (options.autoDownload) {\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = options.filename ? `${options.filename}.json` : `therapy_session_log_${sessionId}.json`;\n      link.click();\n      console.log(\"Session log saved successfully.\");\n    }\n    return {\n      url,\n      blob,\n      sessionId\n    }; // Useful if app wants to upload it or use it differently\n  } catch (error) {\n    console.error(\"Error saving session log:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["attemptLog","logAttempt","metricsObj","push","getAllAttempts","logSession","rawStrokeData","metrics","fatigueInfo","options","autoDownload","filename","timestamp","Date","sessionId","toISOString","replace","sessionSummary","generatedAt","strokes","dataStr","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","click","console","log","error"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/tracking_agent/session_logger.js"],"sourcesContent":["/**\r\n * Logs the handwriting therapy session data by saving strokes, session metrics, and fatigue analysis\r\n * into a downloadable JSON file. Also returns a blob and URL for additional uses (e.g., server upload).\r\n */\r\n\r\nconst attemptLog = [];\r\n\r\nexport function logAttempt(metricsObj) {\r\n  attemptLog.push(metricsObj);\r\n}\r\n\r\nexport function getAllAttempts() {\r\n  return attemptLog;\r\n}\r\n\r\nexport function logSession(rawStrokeData, metrics, fatigueInfo, options = { autoDownload: true, filename: null }) {\r\n  try {\r\n    const timestamp = new Date();\r\n    const sessionId = `session_${timestamp.toISOString().replace(/[:.-]/g, \"_\")}`;\r\n\r\n    const sessionSummary = {\r\n      sessionId,\r\n      generatedAt: timestamp.toISOString(),\r\n      metrics,\r\n      fatigueInfo,\r\n      strokes: rawStrokeData,\r\n    };\r\n\r\n    const dataStr = JSON.stringify(sessionSummary, null, 2);\r\n    const blob = new Blob([dataStr], { type: \"application/json\" });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    if (options.autoDownload) {\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = options.filename \r\n        ? `${options.filename}.json` \r\n        : `therapy_session_log_${sessionId}.json`;\r\n      link.click();\r\n      console.log(\"Session log saved successfully.\");\r\n    }\r\n\r\n    return { url, blob, sessionId }; // Useful if app wants to upload it or use it differently\r\n  } catch (error) {\r\n    console.error(\"Error saving session log:\", error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,UAAU,GAAG,EAAE;AAErB,OAAO,SAASC,UAAUA,CAACC,UAAU,EAAE;EACrCF,UAAU,CAACG,IAAI,CAACD,UAAU,CAAC;AAC7B;AAEA,OAAO,SAASE,cAAcA,CAAA,EAAG;EAC/B,OAAOJ,UAAU;AACnB;AAEA,OAAO,SAASK,UAAUA,CAACC,aAAa,EAAEC,OAAO,EAAEC,WAAW,EAAEC,OAAO,GAAG;EAAEC,YAAY,EAAE,IAAI;EAAEC,QAAQ,EAAE;AAAK,CAAC,EAAE;EAChH,IAAI;IACF,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC5B,MAAMC,SAAS,GAAG,WAAWF,SAAS,CAACG,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE;IAE7E,MAAMC,cAAc,GAAG;MACrBH,SAAS;MACTI,WAAW,EAAEN,SAAS,CAACG,WAAW,CAAC,CAAC;MACpCR,OAAO;MACPC,WAAW;MACXW,OAAO,EAAEb;IACX,CAAC;IAED,MAAMc,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACL,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;IACvD,MAAMM,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,OAAO,CAAC,EAAE;MAAEK,IAAI,EAAE;IAAmB,CAAC,CAAC;IAC9D,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;IAErC,IAAId,OAAO,CAACC,YAAY,EAAE;MACxB,MAAMmB,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;MACfG,IAAI,CAACI,QAAQ,GAAGxB,OAAO,CAACE,QAAQ,GAC5B,GAAGF,OAAO,CAACE,QAAQ,OAAO,GAC1B,uBAAuBG,SAAS,OAAO;MAC3Ce,IAAI,CAACK,KAAK,CAAC,CAAC;MACZC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAChD;IAEA,OAAO;MAAEV,GAAG;MAAEH,IAAI;MAAET;IAAU,CAAC,CAAC,CAAC;EACnC,CAAC,CAAC,OAAOuB,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}