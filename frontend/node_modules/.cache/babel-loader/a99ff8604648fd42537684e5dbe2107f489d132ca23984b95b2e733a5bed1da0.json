{"ast":null,"code":"// File: frontend/src/agents/mcpManager.js\n\nimport { predictDigit } from './cnnAgent.js';\nimport { generateFeedback } from './feedbackAgent.js';\nimport { endTracking } from './tracking_agent/index.js';\nimport { calculateMetrics, analyzeStrokeSpeed, detectMicrographia, detectTremor } from './tracking_agent/metrics_calculator.js';\nimport { detectFatigue } from './tracking_agent/fatigue_detector.js';\nimport { getStrokesRaw } from './tracking_agent';\nimport { generatePDFReport, generateJSONReport } from './tracking_agent/report_generator.js';\nimport { saveSessionResult, getSessionProgressReport } from './tracking_agent/session_logger.js';\nimport { saveSessionToLocal } from '../utils/sessionStorageUtils.js';\nimport JSZip from 'jszip';\nexport class MCPManager {\n  constructor() {\n    this.sessionData = [];\n    this.debugArchive = [];\n    this.patientName = \"Anonymous\";\n    this.sessionId = null;\n    this.language = localStorage.getItem(\"language\") || \"en\";\n  }\n  async startSession(patientName = \"Anonymous\") {\n    console.log(\"🟢 MCP session started for:\", patientName);\n    this.patientName = patientName;\n    this.sessionId = `session_${Date.now()}`;\n  }\n  async processDrawing(drawingDataURL, targetDigit = null) {\n    console.log(\"🔥 [MCP] processDrawing called!\", drawingDataURL, targetDigit);\n    const predictedDigit = await predictDigit(drawingDataURL, this.language, null, this.debugArchive, this.patientName);\n    const feedbackText = await generateFeedback(drawingDataURL, predictedDigit);\n    const strokes = (getStrokesRaw === null || getStrokesRaw === void 0 ? void 0 : getStrokesRaw()) || [];\n    const entry = {\n      drawingDataURL,\n      predictedDigit,\n      targetDigit,\n      correct: targetDigit !== null && predictedDigit === targetDigit,\n      feedbackText,\n      timestamp: new Date().toISOString(),\n      strokes\n    };\n    this.sessionData.push(entry);\n    console.log(\"📝 [MCP] Added entry:\", entry);\n    console.log(\"📊 sessionData so far:\", this.sessionData);\n    return {\n      predictedDigit,\n      feedbackText\n    };\n  }\n  async endSession({\n    generatePDF = true,\n    generateJSON = true,\n    autoDownloadLog = true\n  } = {}) {\n    console.log(\"🔴 MCP ending session for:\", this.patientName);\n    const trackingResults = await endTracking({\n      patientName: this.patientName,\n      sessionId: this.sessionId,\n      generateJSON,\n      autoDownloadLog\n    });\n    const strokes = trackingResults.strokes || [];\n    console.log(\"👉 Strokes received in MCP:\", strokes);\n    const metrics = calculateMetrics(strokes);\n    const fatigueInfo = detectFatigue(strokes);\n    const strokeSpeedData = analyzeStrokeSpeed(strokes);\n    const micrographiaData = detectMicrographia(strokes);\n    const tremorData = detectTremor(strokes);\n    const digitAccuracy = this.sessionData.filter(d => d.correct).length / (this.sessionData.length || 1);\n    const progressReport = getSessionProgressReport({\n      ...metrics,\n      strokeSpeedData,\n      micrographiaData,\n      tremorData,\n      digitAccuracy\n    }, this.patientName);\n\n    // ✅ Save core metrics to file-based logger\n    saveSessionResult(this.patientName.toLowerCase(), {\n      sessionId: this.sessionId,\n      timestamp: new Date().toISOString(),\n      metrics,\n      strokeSpeedData,\n      micrographiaData,\n      tremorData,\n      digitAccuracy\n    });\n\n    // ✅ Save full session to localStorage for UI display\n    const localSession = {\n      sessionId: this.sessionId,\n      patientName: this.patientName,\n      timestamp: new Date().toISOString(),\n      language: this.language,\n      digitAccuracy,\n      drawings: this.sessionData,\n      metrics,\n      fatigueInfo,\n      strokeSpeedData,\n      micrographiaData,\n      tremorData\n    };\n    saveSessionToLocal(this.patientName, localSession);\n    console.log(\"📊 Progress Report:\", progressReport);\n    try {\n      if (generatePDF) {\n        await generatePDFReport(metrics, fatigueInfo, {\n          autoSave: autoDownloadLog,\n          patientName: this.patientName,\n          sessionId: this.sessionId\n        });\n      }\n      if (generateJSON) {\n        await generateJSONReport(metrics, fatigueInfo);\n      }\n      if (this.debugArchive.length > 0) {\n        const zip = new JSZip();\n        for (const item of this.debugArchive) {\n          zip.file(item.name, item.blob);\n        }\n        const content = await zip.generateAsync({\n          type: \"blob\"\n        });\n        const a = document.createElement(\"a\");\n        a.href = URL.createObjectURL(content);\n        a.download = `session_${this.patientName}_${Date.now()}.zip`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      }\n    } catch (err) {\n      console.warn(\"⚠️ Export failed during endSession:\", err);\n    }\n    return {\n      drawings: this.sessionData,\n      metrics,\n      fatigueInfo,\n      strokeSpeedData,\n      micrographiaData,\n      tremorData,\n      digitAccuracy,\n      progressReport\n    };\n  }\n}","map":{"version":3,"names":["predictDigit","generateFeedback","endTracking","calculateMetrics","analyzeStrokeSpeed","detectMicrographia","detectTremor","detectFatigue","getStrokesRaw","generatePDFReport","generateJSONReport","saveSessionResult","getSessionProgressReport","saveSessionToLocal","JSZip","MCPManager","constructor","sessionData","debugArchive","patientName","sessionId","language","localStorage","getItem","startSession","console","log","Date","now","processDrawing","drawingDataURL","targetDigit","predictedDigit","feedbackText","strokes","entry","correct","timestamp","toISOString","push","endSession","generatePDF","generateJSON","autoDownloadLog","trackingResults","metrics","fatigueInfo","strokeSpeedData","micrographiaData","tremorData","digitAccuracy","filter","d","length","progressReport","toLowerCase","localSession","drawings","autoSave","zip","item","file","name","blob","content","generateAsync","type","a","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","err","warn"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/mcpManager.js"],"sourcesContent":["// File: frontend/src/agents/mcpManager.js\r\n\r\nimport { predictDigit } from './cnnAgent.js';\r\nimport { generateFeedback } from './feedbackAgent.js';\r\nimport { endTracking } from './tracking_agent/index.js';\r\nimport { calculateMetrics, analyzeStrokeSpeed, detectMicrographia, detectTremor } from './tracking_agent/metrics_calculator.js';\r\nimport { detectFatigue } from './tracking_agent/fatigue_detector.js';\r\nimport { getStrokesRaw } from './tracking_agent';\r\nimport { generatePDFReport, generateJSONReport } from './tracking_agent/report_generator.js';\r\nimport { saveSessionResult, getSessionProgressReport } from './tracking_agent/session_logger.js';\r\nimport { saveSessionToLocal } from '../utils/sessionStorageUtils.js';\r\nimport JSZip from 'jszip';\r\n\r\nexport class MCPManager {\r\n  constructor() {\r\n    this.sessionData = [];\r\n    this.debugArchive = [];\r\n    this.patientName = \"Anonymous\";\r\n    this.sessionId = null;\r\n    this.language = localStorage.getItem(\"language\") || \"en\";\r\n  }\r\n\r\n  async startSession(patientName = \"Anonymous\") {\r\n    console.log(\"🟢 MCP session started for:\", patientName);\r\n    this.patientName = patientName;\r\n    this.sessionId = `session_${Date.now()}`;\r\n  }\r\n\r\n  async processDrawing(drawingDataURL, targetDigit = null) {\r\n    console.log(\"🔥 [MCP] processDrawing called!\", drawingDataURL, targetDigit);\r\n\r\n    const predictedDigit = await predictDigit(\r\n      drawingDataURL,\r\n      this.language,\r\n      null,\r\n      this.debugArchive,\r\n      this.patientName\r\n    );\r\n\r\n    const feedbackText = await generateFeedback(drawingDataURL, predictedDigit);\r\n    const strokes = getStrokesRaw?.() || [];\r\n\r\n    const entry = {\r\n      drawingDataURL,\r\n      predictedDigit,\r\n      targetDigit,\r\n      correct: targetDigit !== null && predictedDigit === targetDigit,\r\n      feedbackText,\r\n      timestamp: new Date().toISOString(),\r\n      strokes\r\n    };\r\n\r\n    this.sessionData.push(entry);\r\n    console.log(\"📝 [MCP] Added entry:\", entry);\r\n    console.log(\"📊 sessionData so far:\", this.sessionData);\r\n\r\n    return { predictedDigit, feedbackText };\r\n  }\r\n\r\n  async endSession({ generatePDF = true, generateJSON = true, autoDownloadLog = true } = {}) {\r\n    console.log(\"🔴 MCP ending session for:\", this.patientName);\r\n\r\n    const trackingResults = await endTracking({\r\n      patientName: this.patientName,\r\n      sessionId: this.sessionId,\r\n      generateJSON,\r\n      autoDownloadLog\r\n    });\r\n\r\n    const strokes = trackingResults.strokes || [];\r\n    console.log(\"👉 Strokes received in MCP:\", strokes);\r\n\r\n    const metrics = calculateMetrics(strokes);\r\n    const fatigueInfo = detectFatigue(strokes);\r\n    const strokeSpeedData = analyzeStrokeSpeed(strokes);\r\n    const micrographiaData = detectMicrographia(strokes);\r\n    const tremorData = detectTremor(strokes);\r\n\r\n    const digitAccuracy = this.sessionData.filter(d => d.correct).length / (this.sessionData.length || 1);\r\n\r\n    const progressReport = getSessionProgressReport({\r\n      ...metrics,\r\n      strokeSpeedData,\r\n      micrographiaData,\r\n      tremorData,\r\n      digitAccuracy\r\n    }, this.patientName);\r\n\r\n    // ✅ Save core metrics to file-based logger\r\n    saveSessionResult(this.patientName.toLowerCase(), {\r\n      sessionId: this.sessionId,\r\n      timestamp: new Date().toISOString(),\r\n      metrics,\r\n      strokeSpeedData,\r\n      micrographiaData,\r\n      tremorData,\r\n      digitAccuracy\r\n    });\r\n\r\n    // ✅ Save full session to localStorage for UI display\r\n    const localSession = {\r\n      sessionId: this.sessionId,\r\n      patientName: this.patientName,\r\n      timestamp: new Date().toISOString(),\r\n      language: this.language,\r\n      digitAccuracy,\r\n      drawings: this.sessionData,\r\n      metrics,\r\n      fatigueInfo,\r\n      strokeSpeedData,\r\n      micrographiaData,\r\n      tremorData\r\n    };\r\n    saveSessionToLocal(this.patientName, localSession);\r\n\r\n    console.log(\"📊 Progress Report:\", progressReport);\r\n\r\n    try {\r\n      if (generatePDF) {\r\n        await generatePDFReport(metrics, fatigueInfo, {\r\n          autoSave: autoDownloadLog,\r\n          patientName: this.patientName,\r\n          sessionId: this.sessionId\r\n        });\r\n      }\r\n\r\n      if (generateJSON) {\r\n        await generateJSONReport(metrics, fatigueInfo);\r\n      }\r\n\r\n      if (this.debugArchive.length > 0) {\r\n        const zip = new JSZip();\r\n        for (const item of this.debugArchive) {\r\n          zip.file(item.name, item.blob);\r\n        }\r\n\r\n        const content = await zip.generateAsync({ type: \"blob\" });\r\n        const a = document.createElement(\"a\");\r\n        a.href = URL.createObjectURL(content);\r\n        a.download = `session_${this.patientName}_${Date.now()}.zip`;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n      }\r\n\r\n    } catch (err) {\r\n      console.warn(\"⚠️ Export failed during endSession:\", err);\r\n    }\r\n\r\n    return {\r\n      drawings: this.sessionData,\r\n      metrics,\r\n      fatigueInfo,\r\n      strokeSpeedData,\r\n      micrographiaData,\r\n      tremorData,\r\n      digitAccuracy,\r\n      progressReport\r\n    };\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,gBAAgB,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,YAAY,QAAQ,wCAAwC;AAC/H,SAASC,aAAa,QAAQ,sCAAsC;AACpE,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,sCAAsC;AAC5F,SAASC,iBAAiB,EAAEC,wBAAwB,QAAQ,oCAAoC;AAChG,SAASC,kBAAkB,QAAQ,iCAAiC;AACpE,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,WAAW,GAAG,WAAW;IAC9B,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI;EAC1D;EAEA,MAAMC,YAAYA,CAACL,WAAW,GAAG,WAAW,EAAE;IAC5CM,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEP,WAAW,CAAC;IACvD,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,SAAS,GAAG,WAAWO,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;EAC1C;EAEA,MAAMC,cAAcA,CAACC,cAAc,EAAEC,WAAW,GAAG,IAAI,EAAE;IACvDN,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEI,cAAc,EAAEC,WAAW,CAAC;IAE3E,MAAMC,cAAc,GAAG,MAAMhC,YAAY,CACvC8B,cAAc,EACd,IAAI,CAACT,QAAQ,EACb,IAAI,EACJ,IAAI,CAACH,YAAY,EACjB,IAAI,CAACC,WACP,CAAC;IAED,MAAMc,YAAY,GAAG,MAAMhC,gBAAgB,CAAC6B,cAAc,EAAEE,cAAc,CAAC;IAC3E,MAAME,OAAO,GAAG,CAAA1B,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAG,CAAC,KAAI,EAAE;IAEvC,MAAM2B,KAAK,GAAG;MACZL,cAAc;MACdE,cAAc;MACdD,WAAW;MACXK,OAAO,EAAEL,WAAW,KAAK,IAAI,IAAIC,cAAc,KAAKD,WAAW;MAC/DE,YAAY;MACZI,SAAS,EAAE,IAAIV,IAAI,CAAC,CAAC,CAACW,WAAW,CAAC,CAAC;MACnCJ;IACF,CAAC;IAED,IAAI,CAACjB,WAAW,CAACsB,IAAI,CAACJ,KAAK,CAAC;IAC5BV,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAES,KAAK,CAAC;IAC3CV,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAACT,WAAW,CAAC;IAEvD,OAAO;MAAEe,cAAc;MAAEC;IAAa,CAAC;EACzC;EAEA,MAAMO,UAAUA,CAAC;IAAEC,WAAW,GAAG,IAAI;IAAEC,YAAY,GAAG,IAAI;IAAEC,eAAe,GAAG;EAAK,CAAC,GAAG,CAAC,CAAC,EAAE;IACzFlB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAACP,WAAW,CAAC;IAE3D,MAAMyB,eAAe,GAAG,MAAM1C,WAAW,CAAC;MACxCiB,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBsB,YAAY;MACZC;IACF,CAAC,CAAC;IAEF,MAAMT,OAAO,GAAGU,eAAe,CAACV,OAAO,IAAI,EAAE;IAC7CT,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEQ,OAAO,CAAC;IAEnD,MAAMW,OAAO,GAAG1C,gBAAgB,CAAC+B,OAAO,CAAC;IACzC,MAAMY,WAAW,GAAGvC,aAAa,CAAC2B,OAAO,CAAC;IAC1C,MAAMa,eAAe,GAAG3C,kBAAkB,CAAC8B,OAAO,CAAC;IACnD,MAAMc,gBAAgB,GAAG3C,kBAAkB,CAAC6B,OAAO,CAAC;IACpD,MAAMe,UAAU,GAAG3C,YAAY,CAAC4B,OAAO,CAAC;IAExC,MAAMgB,aAAa,GAAG,IAAI,CAACjC,WAAW,CAACkC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAChB,OAAO,CAAC,CAACiB,MAAM,IAAI,IAAI,CAACpC,WAAW,CAACoC,MAAM,IAAI,CAAC,CAAC;IAErG,MAAMC,cAAc,GAAG1C,wBAAwB,CAAC;MAC9C,GAAGiC,OAAO;MACVE,eAAe;MACfC,gBAAgB;MAChBC,UAAU;MACVC;IACF,CAAC,EAAE,IAAI,CAAC/B,WAAW,CAAC;;IAEpB;IACAR,iBAAiB,CAAC,IAAI,CAACQ,WAAW,CAACoC,WAAW,CAAC,CAAC,EAAE;MAChDnC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBiB,SAAS,EAAE,IAAIV,IAAI,CAAC,CAAC,CAACW,WAAW,CAAC,CAAC;MACnCO,OAAO;MACPE,eAAe;MACfC,gBAAgB;MAChBC,UAAU;MACVC;IACF,CAAC,CAAC;;IAEF;IACA,MAAMM,YAAY,GAAG;MACnBpC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBD,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BkB,SAAS,EAAE,IAAIV,IAAI,CAAC,CAAC,CAACW,WAAW,CAAC,CAAC;MACnCjB,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvB6B,aAAa;MACbO,QAAQ,EAAE,IAAI,CAACxC,WAAW;MAC1B4B,OAAO;MACPC,WAAW;MACXC,eAAe;MACfC,gBAAgB;MAChBC;IACF,CAAC;IACDpC,kBAAkB,CAAC,IAAI,CAACM,WAAW,EAAEqC,YAAY,CAAC;IAElD/B,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE4B,cAAc,CAAC;IAElD,IAAI;MACF,IAAIb,WAAW,EAAE;QACf,MAAMhC,iBAAiB,CAACoC,OAAO,EAAEC,WAAW,EAAE;UAC5CY,QAAQ,EAAEf,eAAe;UACzBxB,WAAW,EAAE,IAAI,CAACA,WAAW;UAC7BC,SAAS,EAAE,IAAI,CAACA;QAClB,CAAC,CAAC;MACJ;MAEA,IAAIsB,YAAY,EAAE;QAChB,MAAMhC,kBAAkB,CAACmC,OAAO,EAAEC,WAAW,CAAC;MAChD;MAEA,IAAI,IAAI,CAAC5B,YAAY,CAACmC,MAAM,GAAG,CAAC,EAAE;QAChC,MAAMM,GAAG,GAAG,IAAI7C,KAAK,CAAC,CAAC;QACvB,KAAK,MAAM8C,IAAI,IAAI,IAAI,CAAC1C,YAAY,EAAE;UACpCyC,GAAG,CAACE,IAAI,CAACD,IAAI,CAACE,IAAI,EAAEF,IAAI,CAACG,IAAI,CAAC;QAChC;QAEA,MAAMC,OAAO,GAAG,MAAML,GAAG,CAACM,aAAa,CAAC;UAAEC,IAAI,EAAE;QAAO,CAAC,CAAC;QACzD,MAAMC,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;QACrCF,CAAC,CAACG,IAAI,GAAGC,GAAG,CAACC,eAAe,CAACR,OAAO,CAAC;QACrCG,CAAC,CAACM,QAAQ,GAAG,WAAW,IAAI,CAACtD,WAAW,IAAIQ,IAAI,CAACC,GAAG,CAAC,CAAC,MAAM;QAC5DwC,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,CAAC,CAAC;QAC5BA,CAAC,CAACS,KAAK,CAAC,CAAC;QACTR,QAAQ,CAACM,IAAI,CAACG,WAAW,CAACV,CAAC,CAAC;MAC9B;IAEF,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZrD,OAAO,CAACsD,IAAI,CAAC,qCAAqC,EAAED,GAAG,CAAC;IAC1D;IAEA,OAAO;MACLrB,QAAQ,EAAE,IAAI,CAACxC,WAAW;MAC1B4B,OAAO;MACPC,WAAW;MACXC,eAAe;MACfC,gBAAgB;MAChBC,UAAU;MACVC,aAAa;MACbI;IACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}