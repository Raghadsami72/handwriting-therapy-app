{"ast":null,"code":"export default class TherapySessionAgent {\n  constructor(patientName = \"Anonymous\", mcp = null) {\n    this.patientName = patientName;\n    this.mcp = mcp; // MCP injected\n    this.digits = [...Array(10).keys()];\n    this.currentIndex = 0;\n    this.attempts = [];\n    this.startTime = new Date().toISOString();\n    this.sessionId = `session_${Date.now()}`;\n  }\n  getCurrentDigit() {\n    return this.digits[this.currentIndex];\n  }\n  registerAttempt(predicted, correct, feedbackText) {\n    this.attempts.push({\n      targetDigit: this.getCurrentDigit(),\n      predictedDigit: predicted,\n      correct,\n      feedbackText,\n      timestamp: new Date().toISOString()\n    });\n  }\n  goToNextDigit() {\n    if (this.currentIndex < this.digits.length - 1) {\n      this.currentIndex++;\n    }\n  }\n  isSessionFinished() {\n    return this.currentIndex >= this.digits.length - 1;\n  }\n  async endSession() {\n    if (!this.mcp) {\n      console.warn(\"⚠️ No MCP manager set for this session agent.\");\n      return this.getSessionSummary(); // Fallback\n    }\n    const results = await this.mcp.endSession({\n      generatePDF: false,\n      generateJSON: false,\n      autoDownloadLog: false\n    });\n    this.metrics = results.metrics;\n    this.fatigueInfo = results.fatigueInfo;\n    return this.getSessionSummary(); // full export\n  }\n  getSessionSummary() {\n    return {\n      attempts: this.attempts,\n      metrics: this.metrics || {},\n      fatigueInfo: this.fatigueInfo || {},\n      patientName: this.patientName,\n      sessionId: this.sessionId\n    };\n  }\n}","map":{"version":3,"names":["TherapySessionAgent","constructor","patientName","mcp","digits","Array","keys","currentIndex","attempts","startTime","Date","toISOString","sessionId","now","getCurrentDigit","registerAttempt","predicted","correct","feedbackText","push","targetDigit","predictedDigit","timestamp","goToNextDigit","length","isSessionFinished","endSession","console","warn","getSessionSummary","results","generatePDF","generateJSON","autoDownloadLog","metrics","fatigueInfo"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/tracking_agent/TherapySessionAgent.js"],"sourcesContent":["export default class TherapySessionAgent {\r\n    constructor(patientName = \"Anonymous\", mcp = null) {\r\n      this.patientName = patientName;\r\n      this.mcp = mcp; // MCP injected\r\n      this.digits = [...Array(10).keys()];\r\n      this.currentIndex = 0;\r\n      this.attempts = [];\r\n      this.startTime = new Date().toISOString();\r\n      this.sessionId = `session_${Date.now()}`;\r\n    }\r\n  \r\n    getCurrentDigit() {\r\n      return this.digits[this.currentIndex];\r\n    }\r\n  \r\n    registerAttempt(predicted, correct, feedbackText) {\r\n      this.attempts.push({\r\n        targetDigit: this.getCurrentDigit(),\r\n        predictedDigit: predicted,\r\n        correct,\r\n        feedbackText,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n  \r\n    goToNextDigit() {\r\n      if (this.currentIndex < this.digits.length - 1) {\r\n        this.currentIndex++;\r\n      }\r\n    }\r\n  \r\n    isSessionFinished() {\r\n      return this.currentIndex >= this.digits.length - 1;\r\n    }\r\n  \r\n    async endSession() {\r\n      if (!this.mcp) {\r\n        console.warn(\"⚠️ No MCP manager set for this session agent.\");\r\n        return this.getSessionSummary(); // Fallback\r\n      }\r\n  \r\n      const results = await this.mcp.endSession({\r\n        generatePDF: false,\r\n        generateJSON: false,\r\n        autoDownloadLog: false,\r\n      });\r\n  \r\n      this.metrics = results.metrics;\r\n      this.fatigueInfo = results.fatigueInfo;\r\n  \r\n      return this.getSessionSummary(); // full export\r\n    }\r\n  \r\n    getSessionSummary() {\r\n      return {\r\n        attempts: this.attempts,\r\n        metrics: this.metrics || {},\r\n        fatigueInfo: this.fatigueInfo || {},\r\n        patientName: this.patientName,\r\n        sessionId: this.sessionId,\r\n      };\r\n    }\r\n  }\r\n  "],"mappings":"AAAA,eAAe,MAAMA,mBAAmB,CAAC;EACrCC,WAAWA,CAACC,WAAW,GAAG,WAAW,EAAEC,GAAG,GAAG,IAAI,EAAE;IACjD,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,GAAG,GAAGA,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,MAAM,GAAG,CAAC,GAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IACnC,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACzC,IAAI,CAACC,SAAS,GAAG,WAAWF,IAAI,CAACG,GAAG,CAAC,CAAC,EAAE;EAC1C;EAEAC,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACV,MAAM,CAAC,IAAI,CAACG,YAAY,CAAC;EACvC;EAEAQ,eAAeA,CAACC,SAAS,EAAEC,OAAO,EAAEC,YAAY,EAAE;IAChD,IAAI,CAACV,QAAQ,CAACW,IAAI,CAAC;MACjBC,WAAW,EAAE,IAAI,CAACN,eAAe,CAAC,CAAC;MACnCO,cAAc,EAAEL,SAAS;MACzBC,OAAO;MACPC,YAAY;MACZI,SAAS,EAAE,IAAIZ,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;EAEAY,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAAChB,YAAY,GAAG,IAAI,CAACH,MAAM,CAACoB,MAAM,GAAG,CAAC,EAAE;MAC9C,IAAI,CAACjB,YAAY,EAAE;IACrB;EACF;EAEAkB,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAClB,YAAY,IAAI,IAAI,CAACH,MAAM,CAACoB,MAAM,GAAG,CAAC;EACpD;EAEA,MAAME,UAAUA,CAAA,EAAG;IACjB,IAAI,CAAC,IAAI,CAACvB,GAAG,EAAE;MACbwB,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;MAC7D,OAAO,IAAI,CAACC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACnC;IAEA,MAAMC,OAAO,GAAG,MAAM,IAAI,CAAC3B,GAAG,CAACuB,UAAU,CAAC;MACxCK,WAAW,EAAE,KAAK;MAClBC,YAAY,EAAE,KAAK;MACnBC,eAAe,EAAE;IACnB,CAAC,CAAC;IAEF,IAAI,CAACC,OAAO,GAAGJ,OAAO,CAACI,OAAO;IAC9B,IAAI,CAACC,WAAW,GAAGL,OAAO,CAACK,WAAW;IAEtC,OAAO,IAAI,CAACN,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACnC;EAEAA,iBAAiBA,CAAA,EAAG;IAClB,OAAO;MACLrB,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvB0B,OAAO,EAAE,IAAI,CAACA,OAAO,IAAI,CAAC,CAAC;MAC3BC,WAAW,EAAE,IAAI,CAACA,WAAW,IAAI,CAAC,CAAC;MACnCjC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BU,SAAS,EAAE,IAAI,CAACA;IAClB,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}