{"ast":null,"code":"// agents/cnnAgent.js\n\nimport * as tf from '@tensorflow/tfjs';\n\n// Load your model once\nlet model = null;\nexport async function loadModel() {\n  // Load the model only if it hasn't been loaded yet\n  // Check if the model is already loaded\n  if (!model) {\n    try {\n      model = await tf.loadLayersModel('/t/t/model.json');\n      console.log('CNN model loaded successfully.');\n    } catch (error) {\n      console.error('Error loading CNN model:', error);\n      throw error;\n    }\n  }\n}\nexport async function predictDigit(drawingDataURL) {\n  // Predict the digit from the drawing\n  // Ensure the model is loaded before making predictions\n  if (!model) {\n    await loadModel(); // Load the model if it hasn't been loaded yet\n  }\n\n  // Preprocess the drawing\n  const imageTensor = await preprocessDrawing(drawingDataURL);\n\n  // Make prediction\n  const prediction = model.predict(imageTensor);\n  const predictionArray = await prediction.array();\n  const predictedDigit = predictionArray[0].indexOf(Math.max(...predictionArray[0]));\n  return predictedDigit;\n}\n\n// Helper to preprocess canvas drawing to tensor\nasync function preprocessDrawing(dataURL) {\n  //Converts a base64 image into a TensorFlow.js tensor\n  const image = new Image(); // Create a new image element\n  image.src = dataURL; // Set the source to the base64 data URL\n  //image.crossOrigin = 'Anonymous'; // Handle CORS issues\n\n  await new Promise(resolve => {\n    // Wait for the image to load\n    image.onload = resolve;\n  });\n  const tensor = tf.browser.fromPixels(image, 1) // Grayscale\n  .resizeNearestNeighbor([28, 28]).toFloat().div(255.0).expandDims(0);\n  return tensor;\n}","map":{"version":3,"names":["tf","model","loadModel","loadLayersModel","console","log","error","predictDigit","drawingDataURL","imageTensor","preprocessDrawing","prediction","predict","predictionArray","array","predictedDigit","indexOf","Math","max","dataURL","image","Image","src","Promise","resolve","onload","tensor","browser","fromPixels","resizeNearestNeighbor","toFloat","div","expandDims"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/cnnAgent.js"],"sourcesContent":["// agents/cnnAgent.js\r\n\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\n// Load your model once\r\nlet model = null;\r\n\r\nexport async function loadModel() { // Load the model only if it hasn't been loaded yet\r\n  // Check if the model is already loaded\r\n  if (!model) {\r\n    try {\r\n      model = await tf.loadLayersModel('/t/t/model.json');\r\n      console.log('CNN model loaded successfully.');\r\n    } catch (error) {\r\n      console.error('Error loading CNN model:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function predictDigit(drawingDataURL) {// Predict the digit from the drawing\r\n  // Ensure the model is loaded before making predictions\r\n  if (!model) {\r\n    await loadModel(); // Load the model if it hasn't been loaded yet\r\n  }\r\n\r\n  // Preprocess the drawing\r\n  const imageTensor = await preprocessDrawing(drawingDataURL);\r\n\r\n  // Make prediction\r\n  const prediction = model.predict(imageTensor);\r\n  const predictionArray = await prediction.array();\r\n  const predictedDigit = predictionArray[0].indexOf(Math.max(...predictionArray[0]));\r\n\r\n  return predictedDigit;\r\n}\r\n\r\n// Helper to preprocess canvas drawing to tensor\r\nasync function preprocessDrawing(dataURL) { //Converts a base64 image into a TensorFlow.js tensor\r\n  const image = new Image(); // Create a new image element\r\n  image.src = dataURL;// Set the source to the base64 data URL\r\n  //image.crossOrigin = 'Anonymous'; // Handle CORS issues\r\n\r\n  await new Promise((resolve) => { // Wait for the image to load\r\n    image.onload = resolve;\r\n  });\r\n\r\n  const tensor = tf.browser.fromPixels(image, 1) // Grayscale\r\n    .resizeNearestNeighbor([28, 28])\r\n    .toFloat()\r\n    .div(255.0)\r\n    .expandDims(0);\r\n\r\n  return tensor;\r\n}\r\n"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,EAAE,MAAM,kBAAkB;;AAEtC;AACA,IAAIC,KAAK,GAAG,IAAI;AAEhB,OAAO,eAAeC,SAASA,CAAA,EAAG;EAAE;EAClC;EACA,IAAI,CAACD,KAAK,EAAE;IACV,IAAI;MACFA,KAAK,GAAG,MAAMD,EAAE,CAACG,eAAe,CAAC,iBAAiB,CAAC;MACnDC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,eAAeC,YAAYA,CAACC,cAAc,EAAE;EAAC;EAClD;EACA,IAAI,CAACP,KAAK,EAAE;IACV,MAAMC,SAAS,CAAC,CAAC,CAAC,CAAC;EACrB;;EAEA;EACA,MAAMO,WAAW,GAAG,MAAMC,iBAAiB,CAACF,cAAc,CAAC;;EAE3D;EACA,MAAMG,UAAU,GAAGV,KAAK,CAACW,OAAO,CAACH,WAAW,CAAC;EAC7C,MAAMI,eAAe,GAAG,MAAMF,UAAU,CAACG,KAAK,CAAC,CAAC;EAChD,MAAMC,cAAc,GAAGF,eAAe,CAAC,CAAC,CAAC,CAACG,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGL,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;EAElF,OAAOE,cAAc;AACvB;;AAEA;AACA,eAAeL,iBAAiBA,CAACS,OAAO,EAAE;EAAE;EAC1C,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3BD,KAAK,CAACE,GAAG,GAAGH,OAAO,CAAC;EACpB;;EAEA,MAAM,IAAII,OAAO,CAAEC,OAAO,IAAK;IAAE;IAC/BJ,KAAK,CAACK,MAAM,GAAGD,OAAO;EACxB,CAAC,CAAC;EAEF,MAAME,MAAM,GAAG1B,EAAE,CAAC2B,OAAO,CAACC,UAAU,CAACR,KAAK,EAAE,CAAC,CAAC,CAAC;EAAA,CAC5CS,qBAAqB,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAC/BC,OAAO,CAAC,CAAC,CACTC,GAAG,CAAC,KAAK,CAAC,CACVC,UAAU,CAAC,CAAC,CAAC;EAEhB,OAAON,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}