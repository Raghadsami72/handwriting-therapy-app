{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\HandwritingTherapyApp\\\\frontend\\\\src\\\\components\\\\CanvasDrawing.js\",\n  _s = $RefreshSig$();\n// src/components/CanvasDrawing.js\nimport React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport { startTracking, recordStrokePoint, finalizeStroke } from \"../agents/tracking_agent\";\nimport { logAttempt } from \"../agents/tracking_agent/session_logger\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CanvasDrawing({\n  mcp,\n  patientName,\n  sessionManager,\n  onComplete\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const drawingRef = useRef(false);\n  const currentStrokesRef = useRef([]);\n  const [processing, setProcessing] = useState(false);\n  const [canvasReady, setCanvasReady] = useState(false);\n  const [hasDrawn, setHasDrawn] = useState(false);\n  const currentDigit = sessionManager.getCurrentDigit();\n  const applyCanvasStyles = useCallback(() => {\n    const ctx = ctxRef.current;\n    if (!ctx || !canvasRef.current) return;\n    ctx.fillStyle = \"white\";\n    ctx.strokeStyle = \"black\";\n    ctx.lineWidth = 12;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  }, []);\n  const resetCanvas = useCallback(() => {\n    applyCanvasStyles();\n    setHasDrawn(false);\n    drawingRef.current = false;\n    currentStrokesRef.current = [];\n  }, [applyCanvasStyles]);\n  const handleComplete = useCallback(async () => {\n    if (!hasDrawn) return;\n    setProcessing(true);\n    const canvas = canvasRef.current;\n    const dataURL = canvas.toDataURL();\n    const strokes = [...currentStrokesRef.current];\n    const {\n      predictedDigit,\n      feedbackText\n    } = await mcp.processDrawing(dataURL);\n    const correct = predictedDigit === currentDigit;\n    logAttempt({\n      targetDigit: currentDigit,\n      predictedDigit,\n      correct,\n      feedbackText,\n      strokes,\n      timestamp: new Date().toISOString(),\n      patientName\n    });\n    onComplete(predictedDigit, correct, feedbackText, strokes);\n    resetCanvas();\n    setProcessing(false);\n  }, [hasDrawn, mcp, currentDigit, onComplete, patientName, resetCanvas]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    ctxRef.current = ctx;\n    applyCanvasStyles();\n    startTracking({\n      patientName\n    });\n    currentStrokesRef.current = [];\n    const getPosition = e => {\n      var _e$touches, _e$touches$, _e$touches2, _e$touches2$, _e$pressure;\n      const rect = canvas.getBoundingClientRect();\n      return {\n        x: (e.clientX || ((_e$touches = e.touches) === null || _e$touches === void 0 ? void 0 : (_e$touches$ = _e$touches[0]) === null || _e$touches$ === void 0 ? void 0 : _e$touches$.clientX)) - rect.left,\n        y: (e.clientY || ((_e$touches2 = e.touches) === null || _e$touches2 === void 0 ? void 0 : (_e$touches2$ = _e$touches2[0]) === null || _e$touches2$ === void 0 ? void 0 : _e$touches2$.clientY)) - rect.top,\n        pressure: (_e$pressure = e.pressure) !== null && _e$pressure !== void 0 ? _e$pressure : 0.5,\n        timestamp: Date.now()\n      };\n    };\n    const handlePointerDown = e => {\n      const ctx = ctxRef.current;\n      if (!ctx) return;\n      const point = getPosition(e);\n      ctx.beginPath();\n      ctx.moveTo(point.x, point.y);\n      recordStrokePoint(point);\n      currentStrokesRef.current.push({\n        ...point,\n        type: \"start\"\n      });\n      drawingRef.current = true;\n      setHasDrawn(true);\n    };\n    const handlePointerMove = e => {\n      if (!drawingRef.current) return;\n      const ctx = ctxRef.current;\n      const point = getPosition(e);\n      ctx.lineTo(point.x, point.y);\n      ctx.stroke();\n      recordStrokePoint(point);\n      currentStrokesRef.current.push({\n        ...point,\n        type: \"draw\"\n      });\n    };\n    const handlePointerUp = () => {\n      if (!drawingRef.current) return;\n      const ctx = ctxRef.current;\n      ctx.closePath();\n      drawingRef.current = false;\n      finalizeStroke();\n      currentStrokesRef.current.push({\n        type: \"end\",\n        timestamp: Date.now()\n      });\n      handleComplete();\n    };\n    canvas.addEventListener(\"pointerdown\", handlePointerDown);\n    canvas.addEventListener(\"pointermove\", handlePointerMove);\n    canvas.addEventListener(\"pointerup\", handlePointerUp);\n    canvas.addEventListener(\"pointercancel\", handlePointerUp);\n    setCanvasReady(true);\n    return () => {\n      canvas.removeEventListener(\"pointerdown\", handlePointerDown);\n      canvas.removeEventListener(\"pointermove\", handlePointerMove);\n      canvas.removeEventListener(\"pointerup\", handlePointerUp);\n      canvas.removeEventListener(\"pointercancel\", handlePointerUp);\n    };\n  }, [applyCanvasStyles, patientName, handleComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative flex flex-col items-center space-y-4 mt-4 w-full max-w-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"z-50 rounded-xl border bg-white border-black cursor-crosshair\",\n      width: 300,\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetCanvas,\n      className: \"px-6 py-2 bg-gray-500 text-white rounded-full font-semibold shadow hover:bg-gray-600 transition\",\n      disabled: processing || !canvasReady,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(CanvasDrawing, \"oFS5i+Sjvmc5oJ27tXXk4qqCnN0=\");\n_c = CanvasDrawing;\nexport default CanvasDrawing;\nvar _c;\n$RefreshReg$(_c, \"CanvasDrawing\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","startTracking","recordStrokePoint","finalizeStroke","logAttempt","jsxDEV","_jsxDEV","CanvasDrawing","mcp","patientName","sessionManager","onComplete","_s","canvasRef","ctxRef","drawingRef","currentStrokesRef","processing","setProcessing","canvasReady","setCanvasReady","hasDrawn","setHasDrawn","currentDigit","getCurrentDigit","applyCanvasStyles","ctx","current","fillStyle","strokeStyle","lineWidth","lineCap","lineJoin","fillRect","width","height","resetCanvas","handleComplete","canvas","dataURL","toDataURL","strokes","predictedDigit","feedbackText","processDrawing","correct","targetDigit","timestamp","Date","toISOString","getContext","getPosition","e","_e$touches","_e$touches$","_e$touches2","_e$touches2$","_e$pressure","rect","getBoundingClientRect","x","clientX","touches","left","y","clientY","top","pressure","now","handlePointerDown","point","beginPath","moveTo","push","type","handlePointerMove","lineTo","stroke","handlePointerUp","closePath","addEventListener","removeEventListener","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/components/CanvasDrawing.js"],"sourcesContent":["// src/components/CanvasDrawing.js\r\nimport React, { useRef, useEffect, useState, useCallback } from \"react\";\r\nimport { startTracking, recordStrokePoint, finalizeStroke } from \"../agents/tracking_agent\";\r\nimport { logAttempt } from \"../agents/tracking_agent/session_logger\";\r\n\r\nfunction CanvasDrawing({ mcp, patientName, sessionManager, onComplete }) {\r\n  const canvasRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  const drawingRef = useRef(false);\r\n  const currentStrokesRef = useRef([]);\r\n\r\n  const [processing, setProcessing] = useState(false);\r\n  const [canvasReady, setCanvasReady] = useState(false);\r\n  const [hasDrawn, setHasDrawn] = useState(false);\r\n\r\n  const currentDigit = sessionManager.getCurrentDigit();\r\n\r\n  const applyCanvasStyles = useCallback(() => {\r\n    const ctx = ctxRef.current;\r\n    if (!ctx || !canvasRef.current) return;\r\n\r\n    ctx.fillStyle = \"white\";\r\n    ctx.strokeStyle = \"black\";\r\n    ctx.lineWidth = 12;\r\n    ctx.lineCap = \"round\";\r\n    ctx.lineJoin = \"round\";\r\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n  }, []);\r\n\r\n  const resetCanvas = useCallback(() => {\r\n    applyCanvasStyles();\r\n    setHasDrawn(false);\r\n    drawingRef.current = false;\r\n    currentStrokesRef.current = [];\r\n  }, [applyCanvasStyles]);\r\n\r\n  const handleComplete = useCallback(async () => {\r\n    if (!hasDrawn) return;\r\n    setProcessing(true);\r\n\r\n    const canvas = canvasRef.current;\r\n    const dataURL = canvas.toDataURL();\r\n    const strokes = [...currentStrokesRef.current];\r\n\r\n    const { predictedDigit, feedbackText } = await mcp.processDrawing(dataURL);\r\n    const correct = predictedDigit === currentDigit;\r\n\r\n    logAttempt({\r\n      targetDigit: currentDigit,\r\n      predictedDigit,\r\n      correct,\r\n      feedbackText,\r\n      strokes,\r\n      timestamp: new Date().toISOString(),\r\n      patientName,\r\n    });\r\n\r\n    onComplete(predictedDigit, correct, feedbackText, strokes);\r\n\r\n    resetCanvas();\r\n    setProcessing(false);\r\n  }, [hasDrawn, mcp, currentDigit, onComplete, patientName, resetCanvas]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctxRef.current = ctx;\r\n    applyCanvasStyles();\r\n    startTracking({ patientName });\r\n    currentStrokesRef.current = [];\r\n\r\n    const getPosition = (e) => {\r\n      const rect = canvas.getBoundingClientRect();\r\n      return {\r\n        x: (e.clientX || e.touches?.[0]?.clientX) - rect.left,\r\n        y: (e.clientY || e.touches?.[0]?.clientY) - rect.top,\r\n        pressure: e.pressure ?? 0.5,\r\n        timestamp: Date.now(),\r\n      };\r\n    };\r\n\r\n    const handlePointerDown = (e) => {\r\n      const ctx = ctxRef.current;\r\n      if (!ctx) return;\r\n\r\n      const point = getPosition(e);\r\n      ctx.beginPath();\r\n      ctx.moveTo(point.x, point.y);\r\n      recordStrokePoint(point);\r\n      currentStrokesRef.current.push({ ...point, type: \"start\" });\r\n\r\n      drawingRef.current = true;\r\n      setHasDrawn(true);\r\n    };\r\n\r\n    const handlePointerMove = (e) => {\r\n      if (!drawingRef.current) return;\r\n\r\n      const ctx = ctxRef.current;\r\n      const point = getPosition(e);\r\n      ctx.lineTo(point.x, point.y);\r\n      ctx.stroke();\r\n      recordStrokePoint(point);\r\n      currentStrokesRef.current.push({ ...point, type: \"draw\" });\r\n    };\r\n\r\n    const handlePointerUp = () => {\r\n      if (!drawingRef.current) return;\r\n      const ctx = ctxRef.current;\r\n      ctx.closePath();\r\n      drawingRef.current = false;\r\n      finalizeStroke();\r\n      currentStrokesRef.current.push({ type: \"end\", timestamp: Date.now() });\r\n\r\n      handleComplete();\r\n    };\r\n\r\n    canvas.addEventListener(\"pointerdown\", handlePointerDown);\r\n    canvas.addEventListener(\"pointermove\", handlePointerMove);\r\n    canvas.addEventListener(\"pointerup\", handlePointerUp);\r\n    canvas.addEventListener(\"pointercancel\", handlePointerUp);\r\n\r\n    setCanvasReady(true);\r\n\r\n    return () => {\r\n      canvas.removeEventListener(\"pointerdown\", handlePointerDown);\r\n      canvas.removeEventListener(\"pointermove\", handlePointerMove);\r\n      canvas.removeEventListener(\"pointerup\", handlePointerUp);\r\n      canvas.removeEventListener(\"pointercancel\", handlePointerUp);\r\n    };\r\n  }, [applyCanvasStyles, patientName, handleComplete]);\r\n\r\n  return (\r\n    <div className=\"relative flex flex-col items-center space-y-4 mt-4 w-full max-w-md\">\r\n      <canvas\r\n        ref={canvasRef}\r\n        className=\"z-50 rounded-xl border bg-white border-black cursor-crosshair\"\r\n        width={300}\r\n        height={300}\r\n      />\r\n\r\n      <button\r\n        onClick={resetCanvas}\r\n        className=\"px-6 py-2 bg-gray-500 text-white rounded-full font-semibold shadow hover:bg-gray-600 transition\"\r\n        disabled={processing || !canvasReady}\r\n      >\r\n        Clear\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CanvasDrawing;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}