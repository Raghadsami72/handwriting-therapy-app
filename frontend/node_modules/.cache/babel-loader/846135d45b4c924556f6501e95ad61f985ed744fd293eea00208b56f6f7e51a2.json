{"ast":null,"code":"// File: frontend/src/agents/llmAgent.js\n\nimport { speak } from '../utils/voiceUtils.js';\nimport { openai } from '../utils/openaiClient.js';\n\n/**\r\n * Friendly real-time feedback generator\r\n */\nexport async function generateLiveFeedback({\n  digit,\n  prediction,\n  correct,\n  metrics,\n  speakOut = false\n}) {\n  const prompt = `\nYou are a friendly handwriting therapist giving feedback after a digit attempt.\n\nInfo:\n- Target digit: ${digit}\n- Predicted: ${prediction}\n- Was correct? ${correct ? 'Yes' : 'No'}\n- Metrics: ${JSON.stringify(metrics, null, 2)}\n\nRespond in 2–3 warm, short sentences.\nBe human, calm, and encouraging.\nIf prediction is wrong or a metric is low (e.g. high tremor, low smoothness), gently give tips.\nUse simple language. No jargon.\n  `;\n  try {\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o',\n      messages: [{\n        role: 'user',\n        content: prompt\n      }]\n    });\n    const message = response.choices[0].message.content.trim();\n    if (speakOut) speak(message);\n    return message;\n  } catch (err) {\n    console.error(\"LLM Feedback Error:\", err);\n    return \"That was a good try! Let's keep going and improve together.\";\n  }\n}\n\n/**\r\n * Friendly session summary + suggestion explanation\r\n */\nexport async function generateSessionSummary({\n  name,\n  summary,\n  speakOut = false\n}) {\n  const prompt = `\nYou are a handwriting therapist giving a session summary to a patient named ${name}.\n\nSession Metrics:\n${JSON.stringify(summary, null, 2)}\n\nExplain the session results in a kind, supportive way.\n1. First, praise their effort and any improvements.\n2. Then explain what each metric means (e.g., speed, smoothness, tremor).\n3. Give practical tips if any score is low.\nMake it feel like a real therapist speaking softly. Avoid technical words.\nUse 2–3 short paragraphs. Friendly and human.\n  `;\n  try {\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o',\n      messages: [{\n        role: 'user',\n        content: prompt\n      }]\n    });\n    const message = response.choices[0].message.content.trim();\n    if (speakOut) speak(message);\n    return message;\n  } catch (err) {\n    console.error(\"LLM Summary Error:\", err);\n    return \"You did amazing this session. I'm proud of your effort!\";\n  }\n}","map":{"version":3,"names":["speak","openai","generateLiveFeedback","digit","prediction","correct","metrics","speakOut","prompt","JSON","stringify","response","chat","completions","create","model","messages","role","content","message","choices","trim","err","console","error","generateSessionSummary","name","summary"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/llmAgent.js"],"sourcesContent":["// File: frontend/src/agents/llmAgent.js\r\n\r\nimport { speak } from '../utils/voiceUtils.js';\r\nimport { openai } from '../utils/openaiClient.js';\r\n\r\n/**\r\n * Friendly real-time feedback generator\r\n */\r\nexport async function generateLiveFeedback({ digit, prediction, correct, metrics, speakOut = false }) {\r\n  const prompt = `\r\nYou are a friendly handwriting therapist giving feedback after a digit attempt.\r\n\r\nInfo:\r\n- Target digit: ${digit}\r\n- Predicted: ${prediction}\r\n- Was correct? ${correct ? 'Yes' : 'No'}\r\n- Metrics: ${JSON.stringify(metrics, null, 2)}\r\n\r\nRespond in 2–3 warm, short sentences.\r\nBe human, calm, and encouraging.\r\nIf prediction is wrong or a metric is low (e.g. high tremor, low smoothness), gently give tips.\r\nUse simple language. No jargon.\r\n  `;\r\n\r\n  try {\r\n    const response = await openai.chat.completions.create({\r\n      model: 'gpt-4o',\r\n      messages: [{ role: 'user', content: prompt }],\r\n    });\r\n\r\n    const message = response.choices[0].message.content.trim();\r\n    if (speakOut) speak(message);\r\n    return message;\r\n  } catch (err) {\r\n    console.error(\"LLM Feedback Error:\", err);\r\n    return \"That was a good try! Let's keep going and improve together.\";\r\n  }\r\n}\r\n\r\n/**\r\n * Friendly session summary + suggestion explanation\r\n */\r\nexport async function generateSessionSummary({ name, summary, speakOut = false }) {\r\n  const prompt = `\r\nYou are a handwriting therapist giving a session summary to a patient named ${name}.\r\n\r\nSession Metrics:\r\n${JSON.stringify(summary, null, 2)}\r\n\r\nExplain the session results in a kind, supportive way.\r\n1. First, praise their effort and any improvements.\r\n2. Then explain what each metric means (e.g., speed, smoothness, tremor).\r\n3. Give practical tips if any score is low.\r\nMake it feel like a real therapist speaking softly. Avoid technical words.\r\nUse 2–3 short paragraphs. Friendly and human.\r\n  `;\r\n\r\n  try {\r\n    const response = await openai.chat.completions.create({\r\n      model: 'gpt-4o',\r\n      messages: [{ role: 'user', content: prompt }],\r\n    });\r\n\r\n    const message = response.choices[0].message.content.trim();\r\n    if (speakOut) speak(message);\r\n    return message;\r\n  } catch (err) {\r\n    console.error(\"LLM Summary Error:\", err);\r\n    return \"You did amazing this session. I'm proud of your effort!\";\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEA,SAASA,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,MAAM,QAAQ,0BAA0B;;AAEjD;AACA;AACA;AACA,OAAO,eAAeC,oBAAoBA,CAAC;EAAEC,KAAK;EAAEC,UAAU;EAAEC,OAAO;EAAEC,OAAO;EAAEC,QAAQ,GAAG;AAAM,CAAC,EAAE;EACpG,MAAMC,MAAM,GAAG;AACjB;AACA;AACA;AACA,kBAAkBL,KAAK;AACvB,eAAeC,UAAU;AACzB,iBAAiBC,OAAO,GAAG,KAAK,GAAG,IAAI;AACvC,aAAaI,IAAI,CAACC,SAAS,CAACJ,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMV,MAAM,CAACW,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACpDC,KAAK,EAAE,QAAQ;MACfC,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEV;MAAO,CAAC;IAC9C,CAAC,CAAC;IAEF,MAAMW,OAAO,GAAGR,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,CAACD,OAAO,CAACD,OAAO,CAACG,IAAI,CAAC,CAAC;IAC1D,IAAId,QAAQ,EAAEP,KAAK,CAACmB,OAAO,CAAC;IAC5B,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;IACzC,OAAO,6DAA6D;EACtE;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAeG,sBAAsBA,CAAC;EAAEC,IAAI;EAAEC,OAAO;EAAEpB,QAAQ,GAAG;AAAM,CAAC,EAAE;EAChF,MAAMC,MAAM,GAAG;AACjB,8EAA8EkB,IAAI;AAClF;AACA;AACA,EAAEjB,IAAI,CAACC,SAAS,CAACiB,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMV,MAAM,CAACW,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACpDC,KAAK,EAAE,QAAQ;MACfC,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEV;MAAO,CAAC;IAC9C,CAAC,CAAC;IAEF,MAAMW,OAAO,GAAGR,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,CAACD,OAAO,CAACD,OAAO,CAACG,IAAI,CAAC,CAAC;IAC1D,IAAId,QAAQ,EAAEP,KAAK,CAACmB,OAAO,CAAC;IAC5B,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEF,GAAG,CAAC;IACxC,OAAO,yDAAyD;EAClE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}