{"ast":null,"code":"// âœ… Updated tracking_agent/index.js to store strokes with x, y, timestamp, pressure\n\nlet strokes = [];\nlet currentStroke = [];\nlet sessionMeta = {\n  patientName: \"Anonymous\",\n  sessionId: \"\"\n};\nexport function startTracking({\n  patientName = \"Anonymous\",\n  sessionId = \"\"\n}) {\n  sessionMeta = {\n    patientName,\n    sessionId\n  };\n  strokes = [];\n  currentStroke = [];\n  console.log(\"ðŸ§  Tracking started for\", patientName);\n}\nexport function recordStrokePoint(point) {\n  currentStroke.push(point);\n}\nexport function finalizeStroke() {\n  if (currentStroke.length > 0) {\n    strokes.push(...currentStroke);\n    currentStroke = [];\n  }\n}\nexport async function endTracking({\n  generateJSON = true,\n  autoDownloadLog = true\n}) {\n  finalizeStroke(); // In case the last stroke wasnâ€™t finalized yet\n\n  const result = {\n    patientName: sessionMeta.patientName,\n    sessionId: sessionMeta.sessionId,\n    timestamp: new Date().toISOString(),\n    strokeCount: strokes.length,\n    strokes\n  };\n  console.log(\"ðŸ“ˆ Session Stroke Data:\", result);\n  if (generateJSON && autoDownloadLog) {\n    const blob = new Blob([JSON.stringify(result, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `${sessionMeta.patientName}_tracking_log.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n  return result;\n}","map":{"version":3,"names":["strokes","currentStroke","sessionMeta","patientName","sessionId","startTracking","console","log","recordStrokePoint","point","push","finalizeStroke","length","endTracking","generateJSON","autoDownloadLog","result","timestamp","Date","toISOString","strokeCount","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/tracking_agent/index.js"],"sourcesContent":["// âœ… Updated tracking_agent/index.js to store strokes with x, y, timestamp, pressure\r\n\r\nlet strokes = [];\r\nlet currentStroke = [];\r\nlet sessionMeta = { patientName: \"Anonymous\", sessionId: \"\" };\r\n\r\nexport function startTracking({ patientName = \"Anonymous\", sessionId = \"\" }) {\r\n  sessionMeta = { patientName, sessionId };\r\n  strokes = [];\r\n  currentStroke = [];\r\n  console.log(\"ðŸ§  Tracking started for\", patientName);\r\n}\r\n\r\nexport function recordStrokePoint(point) {\r\n  currentStroke.push(point);\r\n}\r\n\r\nexport function finalizeStroke() {\r\n  if (currentStroke.length > 0) {\r\n    strokes.push(...currentStroke);\r\n    currentStroke = [];\r\n  }\r\n}\r\n\r\nexport async function endTracking({ generateJSON = true, autoDownloadLog = true }) {\r\n  finalizeStroke(); // In case the last stroke wasnâ€™t finalized yet\r\n\r\n  const result = {\r\n    patientName: sessionMeta.patientName,\r\n    sessionId: sessionMeta.sessionId,\r\n    timestamp: new Date().toISOString(),\r\n    strokeCount: strokes.length,\r\n    strokes,\r\n  };\r\n\r\n  console.log(\"ðŸ“ˆ Session Stroke Data:\", result);\r\n\r\n  if (generateJSON && autoDownloadLog) {\r\n    const blob = new Blob([JSON.stringify(result, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = `${sessionMeta.patientName}_tracking_log.json`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  return result;\r\n}\r\n"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAG,EAAE;AAChB,IAAIC,aAAa,GAAG,EAAE;AACtB,IAAIC,WAAW,GAAG;EAAEC,WAAW,EAAE,WAAW;EAAEC,SAAS,EAAE;AAAG,CAAC;AAE7D,OAAO,SAASC,aAAaA,CAAC;EAAEF,WAAW,GAAG,WAAW;EAAEC,SAAS,GAAG;AAAG,CAAC,EAAE;EAC3EF,WAAW,GAAG;IAAEC,WAAW;IAAEC;EAAU,CAAC;EACxCJ,OAAO,GAAG,EAAE;EACZC,aAAa,GAAG,EAAE;EAClBK,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEJ,WAAW,CAAC;AACrD;AAEA,OAAO,SAASK,iBAAiBA,CAACC,KAAK,EAAE;EACvCR,aAAa,CAACS,IAAI,CAACD,KAAK,CAAC;AAC3B;AAEA,OAAO,SAASE,cAAcA,CAAA,EAAG;EAC/B,IAAIV,aAAa,CAACW,MAAM,GAAG,CAAC,EAAE;IAC5BZ,OAAO,CAACU,IAAI,CAAC,GAAGT,aAAa,CAAC;IAC9BA,aAAa,GAAG,EAAE;EACpB;AACF;AAEA,OAAO,eAAeY,WAAWA,CAAC;EAAEC,YAAY,GAAG,IAAI;EAAEC,eAAe,GAAG;AAAK,CAAC,EAAE;EACjFJ,cAAc,CAAC,CAAC,CAAC,CAAC;;EAElB,MAAMK,MAAM,GAAG;IACbb,WAAW,EAAED,WAAW,CAACC,WAAW;IACpCC,SAAS,EAAEF,WAAW,CAACE,SAAS;IAChCa,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,WAAW,EAAEpB,OAAO,CAACY,MAAM;IAC3BZ;EACF,CAAC;EAEDM,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAES,MAAM,CAAC;EAE9C,IAAIF,YAAY,IAAIC,eAAe,EAAE;IACnC,MAAMM,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACR,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE;MACvDS,IAAI,EAAE;IACR,CAAC,CAAC;IACF,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACP,IAAI,CAAC;IACrC,MAAMQ,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACrCF,CAAC,CAACG,IAAI,GAAGN,GAAG;IACZG,CAAC,CAACI,QAAQ,GAAG,GAAG/B,WAAW,CAACC,WAAW,oBAAoB;IAC3D0B,CAAC,CAACK,KAAK,CAAC,CAAC;IACTP,GAAG,CAACQ,eAAe,CAACT,GAAG,CAAC;EAC1B;EAEA,OAAOV,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}