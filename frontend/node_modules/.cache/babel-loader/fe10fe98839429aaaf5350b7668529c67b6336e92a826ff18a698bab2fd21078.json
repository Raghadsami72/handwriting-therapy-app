{"ast":null,"code":"// agents/tracking_agent/fatigue_detector.js\n\nimport { calculateInstantaneousSpeeds } from './metrics_calculator.js';\nexport function detectFatigue(strokes, threshold = 20) {\n  if (strokes.length < 5) {\n    return {\n      detected: false,\n      reason: \"Not enough data to detect fatigue.\"\n    };\n  }\n  const speeds = calculateInstantaneousSpeeds(strokes);\n  if (speeds.length < 5) {\n    return {\n      detected: false,\n      reason: \"Not enough movement to assess fatigue.\"\n    };\n  }\n  const half = Math.floor(speeds.length / 2);\n  const firstHalfSpeeds = speeds.slice(0, half);\n  const secondHalfSpeeds = speeds.slice(half);\n  const avgSpeedFirstHalf = average(firstHalfSpeeds);\n  const avgSpeedSecondHalf = average(secondHalfSpeeds);\n  if (avgSpeedFirstHalf < 10) {\n    return {\n      detected: false,\n      reason: \"Movement too slow to reliably assess fatigue.\"\n    };\n  }\n  const speedDropPercentage = (avgSpeedFirstHalf - avgSpeedSecondHalf) / avgSpeedFirstHalf * 100;\n  return {\n    detected: speedDropPercentage > threshold,\n    reason: `Speed dropped by ${speedDropPercentage.toFixed(2)}% (Threshold: ${threshold}%)`\n  };\n}\nfunction average(arr) {\n  if (arr.length === 0) return 0;\n  return arr.reduce((a, b) => a + b, 0) / arr.length;\n}","map":{"version":3,"names":["calculateInstantaneousSpeeds","detectFatigue","strokes","threshold","length","detected","reason","speeds","half","Math","floor","firstHalfSpeeds","slice","secondHalfSpeeds","avgSpeedFirstHalf","average","avgSpeedSecondHalf","speedDropPercentage","toFixed","arr","reduce","a","b"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/tracking_agent/fatigue_detector.js"],"sourcesContent":["// agents/tracking_agent/fatigue_detector.js\r\n\r\nimport { calculateInstantaneousSpeeds } from './metrics_calculator.js';\r\n\r\nexport function detectFatigue(strokes, threshold = 20) {\r\n  if (strokes.length < 5) {\r\n    return {\r\n      detected: false,\r\n      reason: \"Not enough data to detect fatigue.\",\r\n    };\r\n  }\r\n\r\n  const speeds = calculateInstantaneousSpeeds(strokes);\r\n  \r\n  if (speeds.length < 5) {\r\n    return {\r\n      detected: false,\r\n      reason: \"Not enough movement to assess fatigue.\",\r\n    };\r\n  }\r\n\r\n  const half = Math.floor(speeds.length / 2);\r\n  const firstHalfSpeeds = speeds.slice(0, half);\r\n  const secondHalfSpeeds = speeds.slice(half);\r\n\r\n  const avgSpeedFirstHalf = average(firstHalfSpeeds);\r\n  const avgSpeedSecondHalf = average(secondHalfSpeeds);\r\n\r\n  if (avgSpeedFirstHalf < 10) {\r\n    return {\r\n      detected: false,\r\n      reason: \"Movement too slow to reliably assess fatigue.\",\r\n    };\r\n  }\r\n\r\n  const speedDropPercentage = ((avgSpeedFirstHalf - avgSpeedSecondHalf) / avgSpeedFirstHalf) * 100;\r\n\r\n  return {\r\n    detected: speedDropPercentage > threshold,\r\n    reason: `Speed dropped by ${speedDropPercentage.toFixed(2)}% (Threshold: ${threshold}%)`,\r\n  };\r\n}\r\n\r\nfunction average(arr) {\r\n  if (arr.length === 0) return 0;\r\n  return arr.reduce((a, b) => a + b, 0) / arr.length;\r\n}\r\n"],"mappings":"AAAA;;AAEA,SAASA,4BAA4B,QAAQ,yBAAyB;AAEtE,OAAO,SAASC,aAAaA,CAACC,OAAO,EAAEC,SAAS,GAAG,EAAE,EAAE;EACrD,IAAID,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;IACtB,OAAO;MACLC,QAAQ,EAAE,KAAK;MACfC,MAAM,EAAE;IACV,CAAC;EACH;EAEA,MAAMC,MAAM,GAAGP,4BAA4B,CAACE,OAAO,CAAC;EAEpD,IAAIK,MAAM,CAACH,MAAM,GAAG,CAAC,EAAE;IACrB,OAAO;MACLC,QAAQ,EAAE,KAAK;MACfC,MAAM,EAAE;IACV,CAAC;EACH;EAEA,MAAME,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,CAACH,MAAM,GAAG,CAAC,CAAC;EAC1C,MAAMO,eAAe,GAAGJ,MAAM,CAACK,KAAK,CAAC,CAAC,EAAEJ,IAAI,CAAC;EAC7C,MAAMK,gBAAgB,GAAGN,MAAM,CAACK,KAAK,CAACJ,IAAI,CAAC;EAE3C,MAAMM,iBAAiB,GAAGC,OAAO,CAACJ,eAAe,CAAC;EAClD,MAAMK,kBAAkB,GAAGD,OAAO,CAACF,gBAAgB,CAAC;EAEpD,IAAIC,iBAAiB,GAAG,EAAE,EAAE;IAC1B,OAAO;MACLT,QAAQ,EAAE,KAAK;MACfC,MAAM,EAAE;IACV,CAAC;EACH;EAEA,MAAMW,mBAAmB,GAAI,CAACH,iBAAiB,GAAGE,kBAAkB,IAAIF,iBAAiB,GAAI,GAAG;EAEhG,OAAO;IACLT,QAAQ,EAAEY,mBAAmB,GAAGd,SAAS;IACzCG,MAAM,EAAE,oBAAoBW,mBAAmB,CAACC,OAAO,CAAC,CAAC,CAAC,iBAAiBf,SAAS;EACtF,CAAC;AACH;AAEA,SAASY,OAAOA,CAACI,GAAG,EAAE;EACpB,IAAIA,GAAG,CAACf,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EAC9B,OAAOe,GAAG,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGH,GAAG,CAACf,MAAM;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}