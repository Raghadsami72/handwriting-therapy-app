{"ast":null,"code":"// agents/mcpManager.js\nimport { predictDigit } from './cnnAgent.js';\nimport { generateFeedback } from './feedbackAgent.js';\nimport { endTracking } from './tracking_agent/index.js';\nimport { calculateMetrics } from './tracking_agent/metrics_calculator.js';\nimport { detectFatigue } from './tracking_agent/fatigue_detector.js';\nimport { generatePDFReport, generateJSONReport } from './tracking_agent/report_generator.js';\n//import { logSession } from './tracking_agent/session_logger.js';\n\nexport class MCPManager {\n  constructor() {\n    this.sessionData = [];\n    this.patientName = \"Anonymous\";\n    this.sessionId = null;\n    this.language = localStorage.getItem(\"language\") || \"en\";\n  }\n  async startSession(patientName = \"Anonymous\") {\n    console.log(\"üü¢ MCP session started for:\", patientName);\n    this.patientName = patientName;\n    this.sessionId = `session_${Date.now()}`;\n  }\n  async processDrawing(drawingDataURL) {\n    console.log(\"üñäÔ∏è MCP processing drawing in\", this.language);\n    const predictedDigit = await predictDigit(drawingDataURL, this.language); // Language passed explicitly\n    const feedbackText = await generateFeedback(drawingDataURL, predictedDigit);\n    this.sessionData.push({\n      drawingDataURL,\n      predictedDigit,\n      feedbackText\n    });\n    return {\n      predictedDigit,\n      feedbackText\n    };\n  }\n  async endSession({\n    generatePDF = true,\n    generateJSON = true,\n    autoDownloadLog = true\n  } = {}) {\n    console.log(\"üî¥ MCP ending session for:\", this.patientName);\n    const trackingResults = await endTracking({\n      patientName: this.patientName,\n      sessionId: this.sessionId,\n      generateJSON,\n      autoDownloadLog\n    });\n    const strokes = trackingResults.strokes || [];\n    console.log(\"Strokes before metrics:\", strokes);\n    const metrics = calculateMetrics(strokes);\n    const fatigueInfo = detectFatigue(strokes);\n    try {\n      if (generatePDF) {\n        await generatePDFReport(metrics, fatigueInfo, {\n          autoSave: autoDownloadLog,\n          patientName: this.patientName,\n          sessionId: this.sessionId\n        });\n      }\n      if (generateJSON) {\n        await generateJSONReport(metrics, fatigueInfo);\n      }\n      if (autoDownloadLog) {\n        logSession(strokes, metrics, fatigueInfo, {\n          autoDownload: true,\n          filename: `${this.patientName}_${this.sessionId}`\n        });\n      }\n    } catch (err) {\n      console.warn(\"‚ö†Ô∏è Export failed during endSession:\", err);\n    }\n    return {\n      drawings: this.sessionData,\n      metrics,\n      fatigueInfo\n    };\n  }\n}","map":{"version":3,"names":["predictDigit","generateFeedback","endTracking","calculateMetrics","detectFatigue","generatePDFReport","generateJSONReport","MCPManager","constructor","sessionData","patientName","sessionId","language","localStorage","getItem","startSession","console","log","Date","now","processDrawing","drawingDataURL","predictedDigit","feedbackText","push","endSession","generatePDF","generateJSON","autoDownloadLog","trackingResults","strokes","metrics","fatigueInfo","autoSave","logSession","autoDownload","filename","err","warn","drawings"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/mcpManager.js"],"sourcesContent":["// agents/mcpManager.js\r\nimport { predictDigit } from './cnnAgent.js';\r\nimport { generateFeedback } from './feedbackAgent.js';\r\nimport { endTracking } from './tracking_agent/index.js';\r\n\r\nimport { calculateMetrics } from './tracking_agent/metrics_calculator.js';\r\nimport { detectFatigue } from './tracking_agent/fatigue_detector.js';\r\nimport { generatePDFReport, generateJSONReport } from './tracking_agent/report_generator.js';\r\n//import { logSession } from './tracking_agent/session_logger.js';\r\n\r\nexport class MCPManager {\r\n  constructor() {\r\n    this.sessionData = [];\r\n    this.patientName = \"Anonymous\";\r\n    this.sessionId = null;\r\n    this.language = localStorage.getItem(\"language\") || \"en\";\r\n  }\r\n\r\n  async startSession(patientName = \"Anonymous\") {\r\n    console.log(\"üü¢ MCP session started for:\", patientName);\r\n    this.patientName = patientName;\r\n    this.sessionId = `session_${Date.now()}`;\r\n  }\r\n\r\n  async processDrawing(drawingDataURL) {\r\n    console.log(\"üñäÔ∏è MCP processing drawing in\", this.language);\r\n    const predictedDigit = await predictDigit(drawingDataURL, this.language); // Language passed explicitly\r\n    const feedbackText = await generateFeedback(drawingDataURL, predictedDigit);\r\n\r\n    this.sessionData.push({ drawingDataURL, predictedDigit, feedbackText });\r\n\r\n    return { predictedDigit, feedbackText };\r\n  }\r\n\r\n  async endSession({ generatePDF = true, generateJSON = true, autoDownloadLog = true } = {}) {\r\n    console.log(\"üî¥ MCP ending session for:\", this.patientName);\r\n\r\n    const trackingResults = await endTracking({\r\n      patientName: this.patientName,\r\n      sessionId: this.sessionId,\r\n      generateJSON,\r\n      autoDownloadLog\r\n    });\r\n\r\n    const strokes = trackingResults.strokes || [];\r\n    console.log(\"Strokes before metrics:\", strokes);\r\n    const metrics = calculateMetrics(strokes);\r\n    const fatigueInfo = detectFatigue(strokes);\r\n\r\n    try {\r\n      if (generatePDF) {\r\n        await generatePDFReport(metrics, fatigueInfo, {\r\n          autoSave: autoDownloadLog,\r\n          patientName: this.patientName,\r\n          sessionId: this.sessionId\r\n        });\r\n      }\r\n\r\n      if (generateJSON) {\r\n        await generateJSONReport(metrics, fatigueInfo);\r\n      }\r\n\r\n      if (autoDownloadLog) {\r\n        logSession(strokes, metrics, fatigueInfo, {\r\n          autoDownload: true,\r\n          filename: `${this.patientName}_${this.sessionId}`,\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.warn(\"‚ö†Ô∏è Export failed during endSession:\", err);\r\n    }\r\n\r\n    return {\r\n      drawings: this.sessionData,\r\n      metrics,\r\n      fatigueInfo,\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}