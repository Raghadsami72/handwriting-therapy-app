{"ast":null,"code":"// frontend/src/agents/tracking_agent/session_logger.js\n\n// âœ… Log a drawing session per patient (clean new logic)\nexport function saveSessionResult(patientName, sessionData) {\n  const cleanName = patientName.trim().toLowerCase();\n  const key = `sessions_${cleanName}`;\n  const existing = JSON.parse(localStorage.getItem(key) || \"[]\");\n  const alreadyExists = existing.some(e => e.sessionId === sessionData.sessionId);\n  if (alreadyExists) return;\n  existing.push(sessionData);\n  localStorage.setItem(key, JSON.stringify(existing));\n}\n\n// âœ… Get all saved sessions for a patient\nexport function getAllSessions(patientName) {\n  const cleanName = patientName.trim().toLowerCase();\n  const key = `sessions_${cleanName}`;\n  const sessions = JSON.parse(localStorage.getItem(key) || \"[]\");\n  console.log(`ðŸ“¦ Loaded ${sessions.length} sessions for ${cleanName}`);\n  return sessions;\n}\n\n// âœ… Generate a basic progress comparison against the previous session\nexport function getSessionProgressReport(currentMetrics, patientName) {\n  var _currentMetrics$tremo, _prev$tremorData;\n  const sessions = getAllSessions(patientName);\n  const prev = sessions.at(-2); // second last\n\n  if (!prev) return null;\n  return {\n    speedChange: currentMetrics.avgSpeed - prev.metrics.avgSpeed,\n    tremorChange: ((_currentMetrics$tremo = currentMetrics.tremorData) === null || _currentMetrics$tremo === void 0 ? void 0 : _currentMetrics$tremo.tremorScore) - ((_prev$tremorData = prev.tremorData) === null || _prev$tremorData === void 0 ? void 0 : _prev$tremorData.tremorScore),\n    accuracyChange: currentMetrics.digitAccuracy - prev.digitAccuracy,\n    improvement: currentMetrics.digitAccuracy > prev.digitAccuracy\n  };\n}","map":{"version":3,"names":["saveSessionResult","patientName","sessionData","cleanName","trim","toLowerCase","key","existing","JSON","parse","localStorage","getItem","alreadyExists","some","e","sessionId","push","setItem","stringify","getAllSessions","sessions","console","log","length","getSessionProgressReport","currentMetrics","_currentMetrics$tremo","_prev$tremorData","prev","at","speedChange","avgSpeed","metrics","tremorChange","tremorData","tremorScore","accuracyChange","digitAccuracy","improvement"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/agents/tracking_agent/session_logger.js"],"sourcesContent":["\r\n// frontend/src/agents/tracking_agent/session_logger.js\r\n\r\n// âœ… Log a drawing session per patient (clean new logic)\r\nexport function saveSessionResult(patientName, sessionData) {\r\n  const cleanName = patientName.trim().toLowerCase();\r\n  const key = `sessions_${cleanName}`;\r\n\r\n  const existing = JSON.parse(localStorage.getItem(key) || \"[]\");\r\n\r\n  const alreadyExists = existing.some(e => e.sessionId === sessionData.sessionId);\r\n  if (alreadyExists) return;\r\n\r\n  existing.push(sessionData);\r\n  localStorage.setItem(key, JSON.stringify(existing));\r\n}\r\n\r\n// âœ… Get all saved sessions for a patient\r\nexport function getAllSessions(patientName) {\r\n  const cleanName = patientName.trim().toLowerCase();\r\n  const key = `sessions_${cleanName}`;\r\n\r\n  const sessions = JSON.parse(localStorage.getItem(key) || \"[]\");\r\n  console.log(`ðŸ“¦ Loaded ${sessions.length} sessions for ${cleanName}`);\r\n  return sessions;\r\n}\r\n\r\n// âœ… Generate a basic progress comparison against the previous session\r\nexport function getSessionProgressReport(currentMetrics, patientName) {\r\n  const sessions = getAllSessions(patientName);\r\n  const prev = sessions.at(-2); // second last\r\n\r\n  if (!prev) return null;\r\n\r\n  return {\r\n    speedChange: currentMetrics.avgSpeed - prev.metrics.avgSpeed,\r\n    tremorChange: currentMetrics.tremorData?.tremorScore - prev.tremorData?.tremorScore,\r\n    accuracyChange: currentMetrics.digitAccuracy - prev.digitAccuracy,\r\n    improvement: currentMetrics.digitAccuracy > prev.digitAccuracy,\r\n  };\r\n}\r\n"],"mappings":"AACA;;AAEA;AACA,OAAO,SAASA,iBAAiBA,CAACC,WAAW,EAAEC,WAAW,EAAE;EAC1D,MAAMC,SAAS,GAAGF,WAAW,CAACG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAClD,MAAMC,GAAG,GAAG,YAAYH,SAAS,EAAE;EAEnC,MAAMI,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACL,GAAG,CAAC,IAAI,IAAI,CAAC;EAE9D,MAAMM,aAAa,GAAGL,QAAQ,CAACM,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,KAAKb,WAAW,CAACa,SAAS,CAAC;EAC/E,IAAIH,aAAa,EAAE;EAEnBL,QAAQ,CAACS,IAAI,CAACd,WAAW,CAAC;EAC1BQ,YAAY,CAACO,OAAO,CAACX,GAAG,EAAEE,IAAI,CAACU,SAAS,CAACX,QAAQ,CAAC,CAAC;AACrD;;AAEA;AACA,OAAO,SAASY,cAAcA,CAAClB,WAAW,EAAE;EAC1C,MAAME,SAAS,GAAGF,WAAW,CAACG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAClD,MAAMC,GAAG,GAAG,YAAYH,SAAS,EAAE;EAEnC,MAAMiB,QAAQ,GAAGZ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACL,GAAG,CAAC,IAAI,IAAI,CAAC;EAC9De,OAAO,CAACC,GAAG,CAAC,aAAaF,QAAQ,CAACG,MAAM,iBAAiBpB,SAAS,EAAE,CAAC;EACrE,OAAOiB,QAAQ;AACjB;;AAEA;AACA,OAAO,SAASI,wBAAwBA,CAACC,cAAc,EAAExB,WAAW,EAAE;EAAA,IAAAyB,qBAAA,EAAAC,gBAAA;EACpE,MAAMP,QAAQ,GAAGD,cAAc,CAAClB,WAAW,CAAC;EAC5C,MAAM2B,IAAI,GAAGR,QAAQ,CAACS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE9B,IAAI,CAACD,IAAI,EAAE,OAAO,IAAI;EAEtB,OAAO;IACLE,WAAW,EAAEL,cAAc,CAACM,QAAQ,GAAGH,IAAI,CAACI,OAAO,CAACD,QAAQ;IAC5DE,YAAY,EAAE,EAAAP,qBAAA,GAAAD,cAAc,CAACS,UAAU,cAAAR,qBAAA,uBAAzBA,qBAAA,CAA2BS,WAAW,MAAAR,gBAAA,GAAGC,IAAI,CAACM,UAAU,cAAAP,gBAAA,uBAAfA,gBAAA,CAAiBQ,WAAW;IACnFC,cAAc,EAAEX,cAAc,CAACY,aAAa,GAAGT,IAAI,CAACS,aAAa;IACjEC,WAAW,EAAEb,cAAc,CAACY,aAAa,GAAGT,IAAI,CAACS;EACnD,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}