{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\HandwritingTherapyApp\\\\frontend\\\\src\\\\components\\\\CanvasDrawing.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { ClipLoader } from \"react-spinners\";\nimport successSound from \"../assets/success-chime.mp3\";\nimport { startTracking } from \"../agents/tracking_agent\";\nimport { logAttempt } from \"../agents/tracking_agent/session_logger\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CanvasDrawing({\n  mcp,\n  patientName,\n  sessionManager,\n  onComplete\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const drawingRef = useRef(false);\n  const [processing, setProcessing] = useState(false);\n  const [predictionCount, setPredictionCount] = useState(0);\n  const [canvasReady, setCanvasReady] = useState(false);\n  const [hasDrawn, setHasDrawn] = useState(false);\n  const [floatingDigit, setFloatingDigit] = useState(null);\n  const [isDarkMode, setIsDarkMode] = useState(true); // 🌗 Theme toggle\n\n  const successAudio = new Audio(successSound);\n  const currentDigit = sessionManager.getCurrentDigit();\n  const applyCanvasStyles = () => {\n    const ctx = ctxRef.current;\n    if (!ctx) return;\n    if (isDarkMode) {\n      ctx.fillStyle = \"black\";\n      ctx.strokeStyle = \"white\";\n    } else {\n      ctx.fillStyle = \"white\";\n      ctx.strokeStyle = \"black\";\n    }\n    ctx.lineWidth = 5;\n    ctx.lineCap = \"round\";\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    ctxRef.current = ctx;\n    applyCanvasStyles();\n    const getPosition = e => {\n      const rect = canvas.getBoundingClientRect();\n      const x = (e.touches ? e.touches[0].clientX : e.clientX) - rect.left;\n      const y = (e.touches ? e.touches[0].clientY : e.clientY) - rect.top;\n      return {\n        x,\n        y\n      };\n    };\n    const startDrawing = e => {\n      e.preventDefault();\n      drawingRef.current = true;\n      setHasDrawn(true);\n      const {\n        x,\n        y\n      } = getPosition(e);\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      startTracking({\n        patientName\n      });\n    };\n    const draw = e => {\n      if (!drawingRef.current) return;\n      const {\n        x,\n        y\n      } = getPosition(e);\n      ctx.lineTo(x, y);\n      ctx.stroke();\n    };\n    const stopDrawing = () => {\n      if (!drawingRef.current) return;\n      drawingRef.current = false;\n      ctx.closePath();\n    };\n    canvas.addEventListener(\"mousedown\", startDrawing);\n    canvas.addEventListener(\"mousemove\", draw);\n    canvas.addEventListener(\"mouseup\", stopDrawing);\n    canvas.addEventListener(\"mouseleave\", stopDrawing);\n    canvas.addEventListener(\"touchstart\", startDrawing);\n    canvas.addEventListener(\"touchmove\", draw);\n    canvas.addEventListener(\"touchend\", stopDrawing);\n    canvas.addEventListener(\"touchcancel\", stopDrawing);\n    setCanvasReady(true);\n    return () => {\n      canvas.removeEventListener(\"mousedown\", startDrawing);\n      canvas.removeEventListener(\"mousemove\", draw);\n      canvas.removeEventListener(\"mouseup\", stopDrawing);\n      canvas.removeEventListener(\"mouseleave\", stopDrawing);\n      canvas.removeEventListener(\"touchstart\", startDrawing);\n      canvas.removeEventListener(\"touchmove\", draw);\n      canvas.removeEventListener(\"touchend\", stopDrawing);\n      canvas.removeEventListener(\"touchcancel\", stopDrawing);\n    };\n  }, [patientName, currentDigit, isDarkMode]);\n  const clearCanvas = () => {\n    if (!canvasRef.current || !ctxRef.current) return;\n    applyCanvasStyles(); // clear with correct bg/stroke\n    setHasDrawn(false);\n  };\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n    setTimeout(() => applyCanvasStyles(), 100); // reapply after switch\n  };\n  const handlePredict = async () => {\n    if (!canvasRef.current || !hasDrawn) {\n      toast.error(\"Please draw something first!\");\n      return;\n    }\n    try {\n      setProcessing(true);\n      const dataURL = canvasRef.current.toDataURL(\"image/png\");\n      const {\n        predictedDigit,\n        feedbackText\n      } = await mcp.processDrawing(dataURL);\n      const correct = parseInt(predictedDigit) === currentDigit;\n      setFloatingDigit({\n        digit: predictedDigit,\n        isCorrect: correct\n      });\n      setTimeout(() => setFloatingDigit(null), 1200);\n      sessionManager.registerAttempt(predictedDigit, correct, feedbackText);\n      logAttempt({\n        targetDigit: currentDigit,\n        predictedDigit: parseInt(predictedDigit),\n        correct,\n        feedbackText,\n        timestamp: new Date().toISOString()\n      });\n      if (correct) {\n        successAudio.play();\n        toast.success(`✅ Correct! You wrote ${currentDigit}\\nFeedback: ${feedbackText}`, {\n          duration: 5000,\n          style: {\n            whiteSpace: \"pre-line\"\n          }\n        });\n        setPredictionCount(prev => prev + 1);\n        onComplete();\n      } else {\n        toast.error(`❌ Try again! You wrote ${predictedDigit}, not ${currentDigit}.`);\n      }\n      clearCanvas();\n    } catch (error) {\n      console.error(\"Prediction failed:\", error);\n      toast.error(\"Something went wrong while predicting. Please try again.\");\n    } finally {\n      setProcessing(false);\n    }\n  };\n  const commonButtonClasses = \"px-6 py-2 rounded-full text-white font-semibold transition duration-300 transform hover:scale-105 focus:outline-none focus:ring-2\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative flex flex-col items-center space-y-4 mt-4 w-full max-w-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: `z-50 rounded-xl border ${isDarkMode ? \"bg-black border-white\" : \"bg-white border-black\"} cursor-crosshair`,\n      width: 300,\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePredict,\n        className: `${commonButtonClasses} bg-blue-500 hover:bg-blue-600 focus:ring-blue-300 flex items-center justify-center gap-2`,\n        disabled: processing || !canvasReady,\n        children: processing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ClipLoader, {\n            size: 20,\n            color: \"#fff\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this), \"Processing...\"]\n        }, void 0, true) : \"Predict\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        className: `${commonButtonClasses} bg-gray-500 hover:bg-gray-600 focus:ring-gray-300`,\n        disabled: processing || !canvasReady,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleTheme,\n        className: `${commonButtonClasses} ${isDarkMode ? \"bg-yellow-500 hover:bg-yellow-600\" : \"bg-gray-800 hover:bg-gray-900\"}`,\n        children: isDarkMode ? \"☀️ Light Mode\" : \"🌙 Dark Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), predictionCount > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-blue-700 font-medium\",\n      children: [\"\\u2728 Predictions made: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"font-bold\",\n        children: predictionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), floatingDigit && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `absolute text-5xl font-bold select-none pointer-events-none \n            ${floatingDigit.isCorrect ? \"text-green-400 animate-float-up\" : \"text-red-400 animate-float-down\"} \n            left-1/2 transform -translate-x-1/2 top-1/2`,\n      style: {\n        zIndex: 100\n      },\n      children: floatingDigit.digit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n_s(CanvasDrawing, \"gArJ7ibaqVlyboueKLLT2KJlI/g=\");\n_c = CanvasDrawing;\nexport default CanvasDrawing;\nvar _c;\n$RefreshReg$(_c, \"CanvasDrawing\");","map":{"version":3,"names":["React","useRef","useEffect","useState","toast","ClipLoader","successSound","startTracking","logAttempt","jsxDEV","_jsxDEV","Fragment","_Fragment","CanvasDrawing","mcp","patientName","sessionManager","onComplete","_s","canvasRef","ctxRef","drawingRef","processing","setProcessing","predictionCount","setPredictionCount","canvasReady","setCanvasReady","hasDrawn","setHasDrawn","floatingDigit","setFloatingDigit","isDarkMode","setIsDarkMode","successAudio","Audio","currentDigit","getCurrentDigit","applyCanvasStyles","ctx","current","fillStyle","strokeStyle","lineWidth","lineCap","fillRect","width","height","canvas","getContext","getPosition","e","rect","getBoundingClientRect","x","touches","clientX","left","y","clientY","top","startDrawing","preventDefault","beginPath","moveTo","draw","lineTo","stroke","stopDrawing","closePath","addEventListener","removeEventListener","clearCanvas","toggleTheme","prev","setTimeout","handlePredict","error","dataURL","toDataURL","predictedDigit","feedbackText","processDrawing","correct","parseInt","digit","isCorrect","registerAttempt","targetDigit","timestamp","Date","toISOString","play","success","duration","style","whiteSpace","console","commonButtonClasses","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","size","color","zIndex","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/HandwritingTherapyApp/frontend/src/components/CanvasDrawing.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport successSound from \"../assets/success-chime.mp3\";\r\nimport { startTracking } from \"../agents/tracking_agent\";\r\nimport { logAttempt } from \"../agents/tracking_agent/session_logger\";\r\n\r\nfunction CanvasDrawing({ mcp, patientName, sessionManager, onComplete }) {\r\n  const canvasRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  const drawingRef = useRef(false);\r\n\r\n  const [processing, setProcessing] = useState(false);\r\n  const [predictionCount, setPredictionCount] = useState(0);\r\n  const [canvasReady, setCanvasReady] = useState(false);\r\n  const [hasDrawn, setHasDrawn] = useState(false);\r\n  const [floatingDigit, setFloatingDigit] = useState(null);\r\n  const [isDarkMode, setIsDarkMode] = useState(true); // 🌗 Theme toggle\r\n\r\n  const successAudio = new Audio(successSound);\r\n  const currentDigit = sessionManager.getCurrentDigit();\r\n\r\n  const applyCanvasStyles = () => {\r\n    const ctx = ctxRef.current;\r\n    if (!ctx) return;\r\n\r\n    if (isDarkMode) {\r\n      ctx.fillStyle = \"black\";\r\n      ctx.strokeStyle = \"white\";\r\n    } else {\r\n      ctx.fillStyle = \"white\";\r\n      ctx.strokeStyle = \"black\";\r\n    }\r\n\r\n    ctx.lineWidth = 5;\r\n    ctx.lineCap = \"round\";\r\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctxRef.current = ctx;\r\n    applyCanvasStyles();\r\n\r\n    const getPosition = (e) => {\r\n      const rect = canvas.getBoundingClientRect();\r\n      const x = (e.touches ? e.touches[0].clientX : e.clientX) - rect.left;\r\n      const y = (e.touches ? e.touches[0].clientY : e.clientY) - rect.top;\r\n      return { x, y };\r\n    };\r\n\r\n    const startDrawing = (e) => {\r\n      e.preventDefault();\r\n      drawingRef.current = true;\r\n      setHasDrawn(true);\r\n      const { x, y } = getPosition(e);\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, y);\r\n      startTracking({ patientName });\r\n    };\r\n\r\n    const draw = (e) => {\r\n      if (!drawingRef.current) return;\r\n      const { x, y } = getPosition(e);\r\n      ctx.lineTo(x, y);\r\n      ctx.stroke();\r\n    };\r\n\r\n    const stopDrawing = () => {\r\n      if (!drawingRef.current) return;\r\n      drawingRef.current = false;\r\n      ctx.closePath();\r\n    };\r\n\r\n    canvas.addEventListener(\"mousedown\", startDrawing);\r\n    canvas.addEventListener(\"mousemove\", draw);\r\n    canvas.addEventListener(\"mouseup\", stopDrawing);\r\n    canvas.addEventListener(\"mouseleave\", stopDrawing);\r\n    canvas.addEventListener(\"touchstart\", startDrawing);\r\n    canvas.addEventListener(\"touchmove\", draw);\r\n    canvas.addEventListener(\"touchend\", stopDrawing);\r\n    canvas.addEventListener(\"touchcancel\", stopDrawing);\r\n\r\n    setCanvasReady(true);\r\n\r\n    return () => {\r\n      canvas.removeEventListener(\"mousedown\", startDrawing);\r\n      canvas.removeEventListener(\"mousemove\", draw);\r\n      canvas.removeEventListener(\"mouseup\", stopDrawing);\r\n      canvas.removeEventListener(\"mouseleave\", stopDrawing);\r\n      canvas.removeEventListener(\"touchstart\", startDrawing);\r\n      canvas.removeEventListener(\"touchmove\", draw);\r\n      canvas.removeEventListener(\"touchend\", stopDrawing);\r\n      canvas.removeEventListener(\"touchcancel\", stopDrawing);\r\n    };\r\n  }, [patientName, currentDigit, isDarkMode]);\r\n\r\n  const clearCanvas = () => {\r\n    if (!canvasRef.current || !ctxRef.current) return;\r\n    applyCanvasStyles(); // clear with correct bg/stroke\r\n    setHasDrawn(false);\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setIsDarkMode((prev) => !prev);\r\n    setTimeout(() => applyCanvasStyles(), 100); // reapply after switch\r\n  };\r\n\r\n  const handlePredict = async () => {\r\n    if (!canvasRef.current || !hasDrawn) {\r\n      toast.error(\"Please draw something first!\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setProcessing(true);\r\n      const dataURL = canvasRef.current.toDataURL(\"image/png\");\r\n      const { predictedDigit, feedbackText } = await mcp.processDrawing(dataURL);\r\n      const correct = parseInt(predictedDigit) === currentDigit;\r\n\r\n      setFloatingDigit({ digit: predictedDigit, isCorrect: correct });\r\n      setTimeout(() => setFloatingDigit(null), 1200);\r\n\r\n      sessionManager.registerAttempt(predictedDigit, correct, feedbackText);\r\n\r\n      logAttempt({\r\n        targetDigit: currentDigit,\r\n        predictedDigit: parseInt(predictedDigit),\r\n        correct,\r\n        feedbackText,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n\r\n      if (correct) {\r\n        successAudio.play();\r\n        toast.success(`✅ Correct! You wrote ${currentDigit}\\nFeedback: ${feedbackText}`, {\r\n          duration: 5000,\r\n          style: { whiteSpace: \"pre-line\" },\r\n        });\r\n        setPredictionCount((prev) => prev + 1);\r\n        onComplete();\r\n      } else {\r\n        toast.error(`❌ Try again! You wrote ${predictedDigit}, not ${currentDigit}.`);\r\n      }\r\n\r\n      clearCanvas();\r\n    } catch (error) {\r\n      console.error(\"Prediction failed:\", error);\r\n      toast.error(\"Something went wrong while predicting. Please try again.\");\r\n    } finally {\r\n      setProcessing(false);\r\n    }\r\n  };\r\n\r\n  const commonButtonClasses =\r\n    \"px-6 py-2 rounded-full text-white font-semibold transition duration-300 transform hover:scale-105 focus:outline-none focus:ring-2\";\r\n\r\n  return (\r\n    <div className=\"relative flex flex-col items-center space-y-4 mt-4 w-full max-w-md\">\r\n      <canvas\r\n        ref={canvasRef}\r\n        className={`z-50 rounded-xl border ${\r\n          isDarkMode ? \"bg-black border-white\" : \"bg-white border-black\"\r\n        } cursor-crosshair`}\r\n        width={300}\r\n        height={300}\r\n      />\r\n\r\n      <div className=\"flex flex-wrap gap-4\">\r\n        <button\r\n          onClick={handlePredict}\r\n          className={`${commonButtonClasses} bg-blue-500 hover:bg-blue-600 focus:ring-blue-300 flex items-center justify-center gap-2`}\r\n          disabled={processing || !canvasReady}\r\n        >\r\n          {processing ? (\r\n            <>\r\n              <ClipLoader size={20} color=\"#fff\" />\r\n              Processing...\r\n            </>\r\n          ) : (\r\n            \"Predict\"\r\n          )}\r\n        </button>\r\n\r\n        <button\r\n          onClick={clearCanvas}\r\n          className={`${commonButtonClasses} bg-gray-500 hover:bg-gray-600 focus:ring-gray-300`}\r\n          disabled={processing || !canvasReady}\r\n        >\r\n          Clear\r\n        </button>\r\n\r\n        <button\r\n          onClick={toggleTheme}\r\n          className={`${commonButtonClasses} ${\r\n            isDarkMode ? \"bg-yellow-500 hover:bg-yellow-600\" : \"bg-gray-800 hover:bg-gray-900\"\r\n          }`}\r\n        >\r\n          {isDarkMode ? \"☀️ Light Mode\" : \"🌙 Dark Mode\"}\r\n        </button>\r\n      </div>\r\n\r\n      {predictionCount > 0 && (\r\n        <p className=\"text-blue-700 font-medium\">\r\n          ✨ Predictions made: <span className=\"font-bold\">{predictionCount}</span>\r\n        </p>\r\n      )}\r\n\r\n      {floatingDigit && (\r\n        <div\r\n          className={`absolute text-5xl font-bold select-none pointer-events-none \r\n            ${floatingDigit.isCorrect ? \"text-green-400 animate-float-up\" : \"text-red-400 animate-float-down\"} \r\n            left-1/2 transform -translate-x-1/2 top-1/2`}\r\n          style={{ zIndex: 100 }}\r\n        >\r\n          {floatingDigit.digit}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CanvasDrawing;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}